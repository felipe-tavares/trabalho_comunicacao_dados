{"ast":null,"code":"import Hammer from '@egjs/hammerjs';\nimport State from '../State';\nimport PressGestureHandler from './PressGestureHandler';\nimport { isnan, isValidNumber } from './utils';\n\nclass LongPressGestureHandler extends PressGestureHandler {\n  get minDurationMs() {\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\n  }\n\n  get maxDist() {\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\n  }\n\n  updateHasCustomActivationCriteria({\n    maxDistSq\n  }) {\n    return !isValidNumber(maxDistSq);\n  }\n\n  getConfig() {\n    if (!this._hasCustomActivationCriteria) {\n      // Default config\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\n      return {\n        shouldCancelWhenOutside: true,\n        maxDistSq: 10\n      };\n    }\n\n    return this.config;\n  }\n\n  getHammerConfig() {\n    return { ...super.getHammerConfig(),\n      // threshold: this.maxDist,\n      time: this.minDurationMs\n    };\n  }\n\n  getState(type) {\n    return {\n      [Hammer.INPUT_START]: State.ACTIVE,\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\n      [Hammer.INPUT_END]: State.END,\n      [Hammer.INPUT_CANCEL]: State.FAILED\n    }[type];\n  }\n\n}\n\nexport default LongPressGestureHandler;","map":{"version":3,"sources":["C:/Users/samuk_000/trabalho_comunicacao_dados-master/trabalho/node-react/node_modules/react-native-gesture-handler/web/LongPressGestureHandler.js"],"names":["Hammer","State","PressGestureHandler","isnan","isValidNumber","LongPressGestureHandler","minDurationMs","config","maxDist","updateHasCustomActivationCriteria","maxDistSq","getConfig","_hasCustomActivationCriteria","shouldCancelWhenOutside","getHammerConfig","time","getState","type","INPUT_START","ACTIVE","INPUT_MOVE","INPUT_END","END","INPUT_CANCEL","FAILED"],"mappings":"AAAA,OAAOA,MAAP,MAAmB,gBAAnB;AAEA,OAAOC,KAAP,MAAkB,UAAlB;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,KAAT,EAAgBC,aAAhB,QAAqC,SAArC;;AAEA,MAAMC,uBAAN,SAAsCH,mBAAtC,CAA0D;AACxD,MAAII,aAAJ,GAAoB;AAClB,WAAOH,KAAK,CAAC,KAAKI,MAAL,CAAYD,aAAb,CAAL,GAAmC,GAAnC,GAAyC,KAAKC,MAAL,CAAYD,aAA5D;AACD;;AAED,MAAIE,OAAJ,GAAc;AACZ,WAAOL,KAAK,CAAC,KAAKI,MAAL,CAAYC,OAAb,CAAL,GAA6B,CAA7B,GAAiC,KAAKD,MAAL,CAAYC,OAApD;AACD;;AAEDC,EAAAA,iCAAiC,CAAC;AAAEC,IAAAA;AAAF,GAAD,EAAgB;AAC/C,WAAO,CAACN,aAAa,CAACM,SAAD,CAArB;AACD;;AAEDC,EAAAA,SAAS,GAAG;AACV,QAAI,CAAC,KAAKC,4BAAV,EAAwC;AACtC;AACA;AACA,aAAO;AACLC,QAAAA,uBAAuB,EAAE,IADpB;AAELH,QAAAA,SAAS,EAAE;AAFN,OAAP;AAID;;AACD,WAAO,KAAKH,MAAZ;AACD;;AAEDO,EAAAA,eAAe,GAAG;AAChB,WAAO,EACL,GAAG,MAAMA,eAAN,EADE;AAEL;AACAC,MAAAA,IAAI,EAAE,KAAKT;AAHN,KAAP;AAKD;;AAEDU,EAAAA,QAAQ,CAACC,IAAD,EAAO;AACb,WAAO;AACL,OAACjB,MAAM,CAACkB,WAAR,GAAsBjB,KAAK,CAACkB,MADvB;AAEL,OAACnB,MAAM,CAACoB,UAAR,GAAqBnB,KAAK,CAACkB,MAFtB;AAGL,OAACnB,MAAM,CAACqB,SAAR,GAAoBpB,KAAK,CAACqB,GAHrB;AAIL,OAACtB,MAAM,CAACuB,YAAR,GAAuBtB,KAAK,CAACuB;AAJxB,MAKLP,IALK,CAAP;AAMD;;AAxCuD;;AA2C1D,eAAeZ,uBAAf","sourcesContent":["import Hammer from '@egjs/hammerjs';\r\n\r\nimport State from '../State';\r\nimport PressGestureHandler from './PressGestureHandler';\r\nimport { isnan, isValidNumber } from './utils';\r\n\r\nclass LongPressGestureHandler extends PressGestureHandler {\r\n  get minDurationMs() {\r\n    return isnan(this.config.minDurationMs) ? 251 : this.config.minDurationMs;\r\n  }\r\n\r\n  get maxDist() {\r\n    return isnan(this.config.maxDist) ? 9 : this.config.maxDist;\r\n  }\r\n\r\n  updateHasCustomActivationCriteria({ maxDistSq }) {\r\n    return !isValidNumber(maxDistSq);\r\n  }\r\n\r\n  getConfig() {\r\n    if (!this._hasCustomActivationCriteria) {\r\n      // Default config\r\n      // If no params have been defined then this config should emulate the native gesture as closely as possible.\r\n      return {\r\n        shouldCancelWhenOutside: true,\r\n        maxDistSq: 10,\r\n      };\r\n    }\r\n    return this.config;\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      ...super.getHammerConfig(),\r\n      // threshold: this.maxDist,\r\n      time: this.minDurationMs,\r\n    };\r\n  }\r\n\r\n  getState(type) {\r\n    return {\r\n      [Hammer.INPUT_START]: State.ACTIVE,\r\n      [Hammer.INPUT_MOVE]: State.ACTIVE,\r\n      [Hammer.INPUT_END]: State.END,\r\n      [Hammer.INPUT_CANCEL]: State.FAILED,\r\n    }[type];\r\n  }\r\n}\r\n\r\nexport default LongPressGestureHandler;\r\n"]},"metadata":{},"sourceType":"module"}