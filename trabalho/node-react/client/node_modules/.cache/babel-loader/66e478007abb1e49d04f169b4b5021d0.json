{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\samuk_000\\\\node-react\\\\client\\\\src\\\\Screen1.js\";\nimport React, { Component } from 'react';\nimport { TextInput, StyleSheet, View, ScrollView, Button, Image, KeyboardAvoidingView, ActivityIndicator, Alert } from 'react-native';\nimport logo from \"./logo.svg\";\nimport './Screen1.css';\nexport default class Screen1 extends Component {\n  constructor(props) {\n    super(props);\n\n    this.callApi = async () => {\n      const response = await fetch('/api/mensagem');\n      const body = await response.json();\n      if (response.status !== 200) throw Error(body.message);\n      return body;\n    };\n\n    this.handleSubmit = async e => {\n      e.preventDefault();\n      const response = await fetch('/api/nums', {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          post: this.state.post\n        })\n      });\n      const body = await response.text();\n      this.setState({\n        responseToPost: body\n      });\n    };\n\n    this.state = {\n      min: '',\n      max: '',\n      isLoading: false,\n      message: \"\",\n      response: '',\n      post: '',\n      responseToPost: ''\n    };\n  }\n\n  onChangeHandler(field, value) {\n    this.setState({\n      [field]: value\n    });\n  }\n\n  componentDidMount() {\n    this.callApi().then(res => this.setState({\n      response: res.express\n    })).catch(err => console.log(err));\n  }\n\n  renderButton() {\n    if (this.state.isLoading) return /*#__PURE__*/React.createElement(ActivityIndicator, {\n      size: \"large\",\n      style: styles.loading,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 16\n      }\n    });\n    return /*#__PURE__*/React.createElement(View, {\n      style: styles.btn,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(Button, {\n      title: \"SORTEAR\",\n      color: \"#6542f4\",\n      onPress: () => this.gimmaNumbers(),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 17\n      }\n    }));\n  }\n\n  gimmaNumbers() {\n    const {\n      min,\n      max\n    } = this.state;\n\n    if (!min || !max) {\n      Alert.alert(\"Para calcular informe ambos os valores\");\n      return null;\n    }\n\n    Alert.alert(\"Deseja prosseguir o calculo com os valores informados?\", [{\n      text: \"CANCELAR\",\n      style: 'cancel'\n    }, {\n      text: \"PROSSEGUIR\",\n      onPress: () => {\n        e => e.target.value;\n      } //onChange={e => this.setState({ post: e.target.value })}\n\n    }]);\n  }\n\n  acessarApp() {\n    this.setState({\n      isLoading: false\n    });\n    this.props.navigation.replace('Habitos');\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Screen1\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 7\n      }\n    }, /*#__PURE__*/React.createElement(\"header\", {\n      className: \"Screen1-header\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 103,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"img\", {\n      src: logo,\n      className: \"Screen1-logo\",\n      alt: \"logo\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 17\n      }\n    }), /*#__PURE__*/React.createElement(\"h4\", {\n      className: \"Screen1-title\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 17\n      }\n    }, \"Welcome to React App\")), /*#__PURE__*/React.createElement(\"p\", {\n      className: \"Screen1-intro\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 107,\n        columnNumber: 13\n      }\n    }, this.state.response), /*#__PURE__*/React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 108,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      style: styles.input,\n      placeholder: \"From: (min number)\",\n      value: this.state.min,\n      onChangeText: value => this.onChangeHandler('min', value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 17\n      }\n    })), /*#__PURE__*/React.createElement(View, {\n      style: styles.container,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(TextInput, {\n      style: styles.input,\n      placeholder: \"To: (max number)\",\n      value: this.state.max,\n      onChangeText: value => this.onChangeHandler('max', value),\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 17\n      }\n    })), this.renderButton());\n  }\n\n} //{this.renderButton()}\n\n/*\r\n<p>{this.state.response}</p>\r\n<form onSubmit={this.handleSubmit}>\r\n    <input\r\n        type=\"text\"\r\n        value={this.state.post}\r\n        onChange={e => this.setState({ post: e.target.value })}\r\n    />\r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n<p>{this.state.responseToPost}</p>\r\n*/\n\nconst styles = StyleSheet.create({\n  container: {\n    padding: 10,\n    backgroundColor: 'white',\n    marginTop: 5,\n    marginBottom: 5,\n    elevation: 0.5\n  },\n  scrv: {\n    backgroundColor: '#2C1526'\n  },\n  input: {\n    paddingLeft: 5,\n    paddingRight: 5\n  },\n  btn: {\n    paddingTop: 20,\n    fontSize: 11\n  },\n  loading: {\n    padding: 20\n  }\n});","map":{"version":3,"sources":["C:/Users/samuk_000/node-react/client/src/Screen1.js"],"names":["React","Component","TextInput","StyleSheet","View","ScrollView","Button","Image","KeyboardAvoidingView","ActivityIndicator","Alert","Screen1","constructor","props","callApi","response","fetch","body","json","status","Error","message","handleSubmit","e","preventDefault","method","headers","JSON","stringify","post","state","text","setState","responseToPost","min","max","isLoading","onChangeHandler","field","value","componentDidMount","then","res","express","catch","err","console","log","renderButton","styles","loading","btn","gimmaNumbers","alert","style","onPress","target","acessarApp","navigation","replace","render","logo","container","input","create","padding","backgroundColor","marginTop","marginBottom","elevation","scrv","paddingLeft","paddingRight","paddingTop","fontSize"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport { TextInput, StyleSheet, View, ScrollView, Button, Image, KeyboardAvoidingView, ActivityIndicator, Alert } from 'react-native';\r\nimport logo from './logo.svg';\r\nimport './Screen1.css';\r\n\r\nexport default class Screen1 extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.state = {\r\n            min: '',\r\n            max: '',\r\n            isLoading: false,\r\n            message: \"\",\r\n            response: '',\r\n            post: '',\r\n            responseToPost: '',\r\n        };\r\n    }\r\n\r\n    onChangeHandler(field, value) {\r\n        this.setState({ [field]: value });\r\n    }\r\n\r\n  componentDidMount() {\r\n    this.callApi()\r\n      .then(res => this.setState({ response: res.express }))\r\n      .catch(err => console.log(err));\r\n  }\r\n\r\n  callApi = async () => {\r\n    const response = await fetch('/api/mensagem');\r\n    const body = await response.json();\r\n    if (response.status !== 200) throw Error(body.message);\r\n\r\n    return body;\r\n    };\r\n\r\n    \r\n\r\n  renderButton() {\r\n    if (this.state.isLoading)\r\n        return <ActivityIndicator size=\"large\" style={styles.loading} />;\r\n\r\n    return (\r\n            <View style={styles.btn}>\r\n                <Button\r\n                    title='SORTEAR'\r\n                    color='#6542f4'\r\n                    onPress={() => this.gimmaNumbers()}\r\n                />\r\n            </View>\r\n          )\r\n    }\r\n\r\n    handleSubmit = async e => {\r\n        e.preventDefault();\r\n        const response = await fetch('/api/nums', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ post: this.state.post }),\r\n        });\r\n        const body = await response.text();\r\n\r\n        this.setState({ responseToPost: body });\r\n    };\r\n    \r\n    gimmaNumbers() {\r\n        const { min, max } = this.state;\r\n        if (!min || !max) {\r\n            Alert.alert(\r\n                \"Para calcular informe ambos os valores\"\r\n            );\r\n            return null;\r\n        }\r\n        Alert.alert(\r\n            \"Deseja prosseguir o calculo com os valores informados?\",\r\n            [{\r\n                text: \"CANCELAR\",\r\n                style: 'cancel'\r\n            },\r\n            {\r\n                text: \"PROSSEGUIR\",\r\n                onPress: () => {\r\n                    e => e.target.value\r\n                }\r\n                //onChange={e => this.setState({ post: e.target.value })}\r\n            }],\r\n        );\r\n\r\n    }\r\n\r\n    acessarApp() {\r\n        this.setState({ isLoading: false });\r\n        this.props.navigation.replace('Habitos');\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Screen1\">\r\n        <header className=\"Screen1-header\">\r\n                <img src={logo} className=\"Screen1-logo\" alt=\"logo\" />\r\n                <h4 className=\"Screen1-title\">Welcome to React App</h4>\r\n        </header>\r\n            <p className=\"Screen1-intro\">{this.state.response}</p>\r\n            <View style={styles.container}>\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder=\"From: (min number)\"\r\n                    value={this.state.min}\r\n                    onChangeText={value => this.onChangeHandler('min', value)}\r\n                />\r\n            </View>\r\n            <View style={styles.container}>\r\n                <TextInput\r\n                    style={styles.input}\r\n                    placeholder=\"To: (max number)\"\r\n                    value={this.state.max}\r\n                    onChangeText={value => this.onChangeHandler('max', value)}\r\n                />\r\n            </View>\r\n            {this.renderButton()}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n//{this.renderButton()}\r\n/*\r\n<p>{this.state.response}</p>\r\n<form onSubmit={this.handleSubmit}>\r\n    <input\r\n        type=\"text\"\r\n        value={this.state.post}\r\n        onChange={e => this.setState({ post: e.target.value })}\r\n    />\r\n    <button type=\"submit\">Submit</button>\r\n</form>\r\n<p>{this.state.responseToPost}</p>\r\n*/\r\nconst styles = StyleSheet.create({\r\n    container: {\r\n        padding: 10,\r\n        backgroundColor: 'white',\r\n        marginTop: 5,\r\n        marginBottom: 5,\r\n        elevation: 0.5,\r\n    },\r\n    scrv: {\r\n        backgroundColor: '#2C1526',\r\n    },\r\n    input: {\r\n        paddingLeft: 5,\r\n        paddingRight: 5,\r\n    },\r\n    btn: {\r\n        paddingTop: 20,\r\n        fontSize: 11,\r\n    },\r\n    loading: {\r\n        padding: 20,\r\n    }\r\n});"]},"metadata":{},"sourceType":"module"}