{"ast":null,"code":"import { Direction } from './web/constants';\nimport FlingGestureHandler from './web/FlingGestureHandler';\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\nimport * as NodeManager from './web/NodeManager';\nimport PanGestureHandler from './web/PanGestureHandler';\nimport PinchGestureHandler from './web/PinchGestureHandler';\nimport RotationGestureHandler from './web/RotationGestureHandler';\nimport TapGestureHandler from './web/TapGestureHandler';\nconst Gestures = {\n  PanGestureHandler,\n  RotationGestureHandler,\n  PinchGestureHandler,\n  TapGestureHandler,\n  NativeViewGestureHandler,\n  LongPressGestureHandler,\n  FlingGestureHandler // ForceTouchGestureHandler,\n\n};\nexport default {\n  Direction,\n\n  handleSetJSResponder(tag, blockNativeResponder) {\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\n  },\n\n  handleClearJSResponder() {\n    console.warn('handleClearJSResponder: ');\n  },\n\n  createGestureHandler(handlerName, handlerTag, config) {\n    if (!(handlerName in Gestures)) throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\n    const GestureClass = Gestures[handlerName];\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\n    this.updateGestureHandler(handlerTag, config);\n  },\n\n  attachGestureHandler(handlerTag, newView) {\n    NodeManager.getHandler(handlerTag).setView(newView);\n  },\n\n  updateGestureHandler(handlerTag, newConfig) {\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\n  },\n\n  getGestureHandlerNode(handlerTag) {\n    return NodeManager.getHandler(handlerTag);\n  },\n\n  dropGestureHandler(handlerTag) {\n    NodeManager.dropGestureHandler(handlerTag);\n  }\n\n};","map":{"version":3,"sources":["C:/Users/samuk_000/trabalho_comunicacao_dados-master/trabalho/node-react/node_modules/react-native-gesture-handler/RNGestureHandlerModule.web.js"],"names":["Direction","FlingGestureHandler","LongPressGestureHandler","NativeViewGestureHandler","NodeManager","PanGestureHandler","PinchGestureHandler","RotationGestureHandler","TapGestureHandler","Gestures","handleSetJSResponder","tag","blockNativeResponder","console","warn","handleClearJSResponder","createGestureHandler","handlerName","handlerTag","config","Error","GestureClass","updateGestureHandler","attachGestureHandler","newView","getHandler","setView","newConfig","updateGestureConfig","getGestureHandlerNode","dropGestureHandler"],"mappings":"AAAA,SAASA,SAAT,QAA0B,iBAA1B;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,uBAAP,MAAoC,+BAApC;AACA,OAAOC,wBAAP,MAAqC,gCAArC;AACA,OAAO,KAAKC,WAAZ,MAA6B,mBAA7B;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AACA,OAAOC,mBAAP,MAAgC,2BAAhC;AACA,OAAOC,sBAAP,MAAmC,8BAAnC;AACA,OAAOC,iBAAP,MAA8B,yBAA9B;AAEA,MAAMC,QAAQ,GAAG;AACfJ,EAAAA,iBADe;AAEfE,EAAAA,sBAFe;AAGfD,EAAAA,mBAHe;AAIfE,EAAAA,iBAJe;AAKfL,EAAAA,wBALe;AAMfD,EAAAA,uBANe;AAOfD,EAAAA,mBAPe,CAQf;;AARe,CAAjB;AAWA,eAAe;AACbD,EAAAA,SADa;;AAEbU,EAAAA,oBAAoB,CAACC,GAAD,EAAMC,oBAAN,EAA4B;AAC9CC,IAAAA,OAAO,CAACC,IAAR,CAAa,wBAAb,EAAuCH,GAAvC,EAA4CC,oBAA5C;AACD,GAJY;;AAKbG,EAAAA,sBAAsB,GAAG;AACvBF,IAAAA,OAAO,CAACC,IAAR,CAAa,0BAAb;AACD,GAPY;;AAQbE,EAAAA,oBAAoB,CAACC,WAAD,EAAcC,UAAd,EAA0BC,MAA1B,EAAkC;AACpD,QAAI,EAAEF,WAAW,IAAIR,QAAjB,CAAJ,EACE,MAAM,IAAIW,KAAJ,CAAW,iCAAgCH,WAAY,2BAAvD,CAAN;AACF,UAAMI,YAAY,GAAGZ,QAAQ,CAACQ,WAAD,CAA7B;AACAb,IAAAA,WAAW,CAACY,oBAAZ,CAAiCE,UAAjC,EAA6C,IAAIG,YAAJ,EAA7C;AACA,SAAKC,oBAAL,CAA0BJ,UAA1B,EAAsCC,MAAtC;AACD,GAdY;;AAebI,EAAAA,oBAAoB,CAACL,UAAD,EAAaM,OAAb,EAAsB;AACxCpB,IAAAA,WAAW,CAACqB,UAAZ,CAAuBP,UAAvB,EAAmCQ,OAAnC,CAA2CF,OAA3C;AACD,GAjBY;;AAkBbF,EAAAA,oBAAoB,CAACJ,UAAD,EAAaS,SAAb,EAAwB;AAC1CvB,IAAAA,WAAW,CAACqB,UAAZ,CAAuBP,UAAvB,EAAmCU,mBAAnC,CAAuDD,SAAvD;AACD,GApBY;;AAqBbE,EAAAA,qBAAqB,CAACX,UAAD,EAAa;AAChC,WAAOd,WAAW,CAACqB,UAAZ,CAAuBP,UAAvB,CAAP;AACD,GAvBY;;AAwBbY,EAAAA,kBAAkB,CAACZ,UAAD,EAAa;AAC7Bd,IAAAA,WAAW,CAAC0B,kBAAZ,CAA+BZ,UAA/B;AACD;;AA1BY,CAAf","sourcesContent":["import { Direction } from './web/constants';\r\nimport FlingGestureHandler from './web/FlingGestureHandler';\r\nimport LongPressGestureHandler from './web/LongPressGestureHandler';\r\nimport NativeViewGestureHandler from './web/NativeViewGestureHandler';\r\nimport * as NodeManager from './web/NodeManager';\r\nimport PanGestureHandler from './web/PanGestureHandler';\r\nimport PinchGestureHandler from './web/PinchGestureHandler';\r\nimport RotationGestureHandler from './web/RotationGestureHandler';\r\nimport TapGestureHandler from './web/TapGestureHandler';\r\n\r\nconst Gestures = {\r\n  PanGestureHandler,\r\n  RotationGestureHandler,\r\n  PinchGestureHandler,\r\n  TapGestureHandler,\r\n  NativeViewGestureHandler,\r\n  LongPressGestureHandler,\r\n  FlingGestureHandler,\r\n  // ForceTouchGestureHandler,\r\n};\r\n\r\nexport default {\r\n  Direction,\r\n  handleSetJSResponder(tag, blockNativeResponder) {\r\n    console.warn('handleSetJSResponder: ', tag, blockNativeResponder);\r\n  },\r\n  handleClearJSResponder() {\r\n    console.warn('handleClearJSResponder: ');\r\n  },\r\n  createGestureHandler(handlerName, handlerTag, config) {\r\n    if (!(handlerName in Gestures))\r\n      throw new Error(`react-native-gesture-handler: ${handlerName} is not supported on web.`);\r\n    const GestureClass = Gestures[handlerName];\r\n    NodeManager.createGestureHandler(handlerTag, new GestureClass());\r\n    this.updateGestureHandler(handlerTag, config);\r\n  },\r\n  attachGestureHandler(handlerTag, newView) {\r\n    NodeManager.getHandler(handlerTag).setView(newView);\r\n  },\r\n  updateGestureHandler(handlerTag, newConfig) {\r\n    NodeManager.getHandler(handlerTag).updateGestureConfig(newConfig);\r\n  },\r\n  getGestureHandlerNode(handlerTag) {\r\n    return NodeManager.getHandler(handlerTag);\r\n  },\r\n  dropGestureHandler(handlerTag) {\r\n    NodeManager.dropGestureHandler(handlerTag);\r\n  },\r\n};\r\n"]},"metadata":{},"sourceType":"module"}