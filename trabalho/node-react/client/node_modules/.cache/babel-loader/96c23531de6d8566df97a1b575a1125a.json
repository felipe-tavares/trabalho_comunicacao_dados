{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { StyleSheet, I18nManager, Platform, Keyboard, StatusBar, View, InteractionManager, TouchableWithoutFeedback } from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport { PanGestureHandler, TapGestureHandler, GestureState } from './GestureHandler';\nimport Overlay from './Overlay';\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub\n} = Animated;\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\nconst SWIPE_DISTANCE_MINIMUM = 5;\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01\n};\nconst ANIMATED_ONE = new Animated.Value(1);\nexport default class DrawerView extends React.Component {\n  constructor(...args) {\n    super(...args);\n\n    _defineProperty(this, \"handleEscape\", e => {\n      const {\n        open,\n        onClose\n      } = this.props;\n\n      if (e.key === 'Escape') {\n        if (open) {\n          onClose();\n        }\n      }\n    });\n\n    _defineProperty(this, \"handleEndInteraction\", () => {\n      if (this.interactionHandle !== undefined) {\n        InteractionManager.clearInteractionHandle(this.interactionHandle);\n        this.interactionHandle = undefined;\n      }\n    });\n\n    _defineProperty(this, \"handleStartInteraction\", () => {\n      if (this.interactionHandle === undefined) {\n        this.interactionHandle = InteractionManager.createInteractionHandle();\n      }\n    });\n\n    _defineProperty(this, \"getDrawerWidth\", () => {\n      const {\n        drawerStyle,\n        dimensions\n      } = this.props;\n      const {\n        width\n      } = StyleSheet.flatten(drawerStyle);\n\n      if (typeof width === 'string' && width.endsWith('%')) {\n        // Try to calculate width if a percentage is given\n        const percentage = Number(width.replace(/%$/, ''));\n\n        if (Number.isFinite(percentage)) {\n          return dimensions.width * (percentage / 100);\n        }\n      }\n\n      return typeof width === 'number' ? width : 0;\n    });\n\n    _defineProperty(this, \"clock\", new Clock());\n\n    _defineProperty(this, \"interactionHandle\", void 0);\n\n    _defineProperty(this, \"isDrawerTypeFront\", new Value(this.props.drawerType === 'front' ? TRUE : FALSE));\n\n    _defineProperty(this, \"isOpen\", new Value(this.props.open ? TRUE : FALSE));\n\n    _defineProperty(this, \"nextIsOpen\", new Value(UNSET));\n\n    _defineProperty(this, \"isSwiping\", new Value(FALSE));\n\n    _defineProperty(this, \"initialDrawerWidth\", this.getDrawerWidth());\n\n    _defineProperty(this, \"gestureState\", new Value(GestureState.UNDETERMINED));\n\n    _defineProperty(this, \"touchX\", new Value(0));\n\n    _defineProperty(this, \"velocityX\", new Value(0));\n\n    _defineProperty(this, \"gestureX\", new Value(0));\n\n    _defineProperty(this, \"offsetX\", new Value(0));\n\n    _defineProperty(this, \"position\", new Value(this.props.open ? this.initialDrawerWidth * (this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT) : 0));\n\n    _defineProperty(this, \"containerWidth\", new Value(this.props.dimensions.width));\n\n    _defineProperty(this, \"drawerWidth\", new Value(this.initialDrawerWidth));\n\n    _defineProperty(this, \"drawerOpacity\", new Value(this.initialDrawerWidth || this.props.drawerType === 'permanent' ? 1 : 0));\n\n    _defineProperty(this, \"drawerPosition\", new Value(this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT));\n\n    _defineProperty(this, \"touchDistanceFromDrawer\", cond(this.isDrawerTypeFront, cond(eq(this.drawerPosition, DIRECTION_LEFT), max( // Distance of touch start from left screen edge - Drawer width\n    sub(sub(this.touchX, this.gestureX), this.drawerWidth), 0), min(multiply( // Distance of drawer from left screen edge - Touch start point\n    sub(sub(this.containerWidth, this.drawerWidth), sub(this.touchX, this.gestureX)), DIRECTION_RIGHT), 0)), 0));\n\n    _defineProperty(this, \"swipeDistanceThreshold\", new Value(this.props.swipeDistanceThreshold !== undefined ? this.props.swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT));\n\n    _defineProperty(this, \"swipeVelocityThreshold\", new Value(this.props.swipeVelocityThreshold));\n\n    _defineProperty(this, \"currentOpenValue\", this.props.open);\n\n    _defineProperty(this, \"pendingOpenValue\", void 0);\n\n    _defineProperty(this, \"isStatusBarHidden\", false);\n\n    _defineProperty(this, \"manuallyTriggerSpring\", new Value(FALSE));\n\n    _defineProperty(this, \"transitionTo\", isOpen => {\n      const toValue = new Value(0);\n      const frameTime = new Value(0);\n      const state = {\n        position: this.position,\n        time: new Value(0),\n        finished: new Value(FALSE),\n        velocity: new Value(0)\n      };\n      return block([cond(clockRunning(this.clock), NOOP, [// Animation wasn't running before\n      // Set the initial values and start the clock\n      set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)), set(frameTime, 0), set(state.time, 0), set(state.finished, FALSE), set(state.velocity, this.velocityX), set(this.isOpen, isOpen), startClock(this.clock), call([], this.handleStartInteraction), set(this.manuallyTriggerSpring, FALSE)]), spring(this.clock, state, _objectSpread(_objectSpread({}, SPRING_CONFIG), {}, {\n        toValue\n      })), cond(state.finished, [// Reset gesture and velocity from previous gesture\n      set(this.touchX, 0), set(this.gestureX, 0), set(this.velocityX, 0), set(this.offsetX, 0), // When the animation finishes, stop the clock\n      stopClock(this.clock), call([this.isOpen], ([value]) => {\n        const open = Boolean(value);\n        this.handleEndInteraction();\n\n        if (open !== this.props.open) {\n          // Sync drawer's state after animation finished\n          // This shouldn't be necessary, but there seems to be an issue on iOS\n          this.toggleDrawer(this.props.open);\n        }\n      })])]);\n    });\n\n    _defineProperty(this, \"dragX\", block([onChange(this.isOpen, call([this.isOpen], ([value]) => {\n      const open = Boolean(value);\n      this.currentOpenValue = open; // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n\n      if (open !== this.props.open) {\n        // If the mode changed, update state\n        if (open) {\n          this.props.onOpen();\n        } else {\n          this.props.onClose();\n        }\n\n        this.pendingOpenValue = open; // Force componentDidUpdate to fire, whether user does a setState or not\n        // This allows us to detect when the user drops the update and revert back\n        // It's necessary to make sure that the state stays in sync\n\n        this.forceUpdate();\n      }\n    })), onChange(this.nextIsOpen, cond(neq(this.nextIsOpen, UNSET), [// Stop any running animations\n    cond(clockRunning(this.clock), stopClock(this.clock)), // Update the open value to trigger the transition\n    set(this.isOpen, this.nextIsOpen), set(this.gestureX, 0), set(this.nextIsOpen, UNSET)])), // This block must be after the this.isOpen listener since we check for current value\n    onChange(this.isSwiping, // Listen to updates for this value only when it changes\n    // Without `onChange`, this will fire even if the value didn't change\n    // We don't want to call the listeners if the value didn't change\n    call([this.isSwiping], ([value]) => {\n      const {\n        keyboardDismissMode\n      } = this.props;\n\n      if (value === TRUE) {\n        if (keyboardDismissMode === 'on-drag') {\n          Keyboard.dismiss();\n        }\n\n        this.toggleStatusBar(true);\n      } else {\n        this.toggleStatusBar(this.currentOpenValue);\n      }\n    })), onChange(this.gestureState, cond(eq(this.gestureState, GestureState.ACTIVE), call([], this.handleStartInteraction))), cond(eq(this.gestureState, GestureState.ACTIVE), [cond(this.isSwiping, NOOP, [// We weren't dragging before, set it to true\n    set(this.isSwiping, TRUE), // Also update the drag offset to the last position\n    set(this.offsetX, this.position)]), // Update position with previous offset + gesture distance\n    set(this.position, add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)), // Stop animations while we're dragging\n    stopClock(this.clock)], [set(this.isSwiping, FALSE), set(this.touchX, 0), this.transitionTo(cond(this.manuallyTriggerSpring, this.isOpen, cond(or(and(greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM), greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)), greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)), cond(eq(this.drawerPosition, DIRECTION_LEFT), // If swiped to right, open the drawer, otherwise close it\n    greaterThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0), // If swiped to left, open the drawer, otherwise close it\n    lessThan(cond(eq(this.velocityX, 0), this.gestureX, this.velocityX), 0)), this.isOpen)))]), this.position]));\n\n    _defineProperty(this, \"translateX\", cond(eq(this.drawerPosition, DIRECTION_RIGHT), min(max(multiply(this.drawerWidth, -1), this.dragX), 0), max(min(this.drawerWidth, this.dragX), 0)));\n\n    _defineProperty(this, \"progress\", cond( // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0), 0, abs(divide(this.translateX, this.drawerWidth))));\n\n    _defineProperty(this, \"handleGestureEvent\", event([{\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX\n      }\n    }]));\n\n    _defineProperty(this, \"handleGestureStateChange\", event([{\n      nativeEvent: {\n        state: s => set(this.gestureState, s)\n      }\n    }]));\n\n    _defineProperty(this, \"handleTapStateChange\", event([{\n      nativeEvent: {\n        oldState: s => cond(eq(s, GestureState.ACTIVE), set(this.manuallyTriggerSpring, TRUE))\n      }\n    }]));\n\n    _defineProperty(this, \"handleContainerLayout\", e => this.containerWidth.setValue(e.nativeEvent.layout.width));\n\n    _defineProperty(this, \"handleDrawerLayout\", e => {\n      this.drawerWidth.setValue(e.nativeEvent.layout.width);\n      this.toggleDrawer(this.props.open); // Until layout is available, drawer is hidden with opacity: 0 by default\n      // Show it in the next frame when layout is available\n      // If we don't delay it until the next frame, there's a visible flicker\n\n      requestAnimationFrame(() => requestAnimationFrame(() => this.drawerOpacity.setValue(1)));\n    });\n\n    _defineProperty(this, \"toggleDrawer\", open => {\n      if (this.currentOpenValue !== open) {\n        this.nextIsOpen.setValue(open ? TRUE : FALSE); // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n        // However, there's a race condition on Android, so we need to set a bit earlier\n\n        this.currentOpenValue = open;\n      }\n    });\n\n    _defineProperty(this, \"toggleStatusBar\", hidden => {\n      const {\n        hideStatusBar,\n        statusBarAnimation\n      } = this.props;\n\n      if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n        this.isStatusBarHidden = hidden;\n        StatusBar.setHidden(hidden, statusBarAnimation);\n      }\n    });\n  }\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      var _document, _document$body, _document$body$addEve;\n\n      (_document = document) === null || _document === void 0 ? void 0 : (_document$body = _document.body) === null || _document$body === void 0 ? void 0 : (_document$body$addEve = _document$body.addEventListener) === null || _document$body$addEve === void 0 ? void 0 : _document$body$addEve.call(_document$body, 'keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar\n    } = this.props;\n\n    if ( // If we're not in the middle of a transition, sync the drawer's open state\n    typeof this.pendingOpenValue !== 'boolean' || open !== this.pendingOpenValue) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT);\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(swipeDistanceThreshold !== undefined ? swipeDistanceThreshold : SWIPE_DISTANCE_THRESHOLD_DEFAULT);\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      var _document2, _document2$body, _document2$body$remov;\n\n      (_document2 = document) === null || _document2 === void 0 ? void 0 : (_document2$body = _document2.body) === null || _document2$body === void 0 ? void 0 : (_document2$body$remov = _document2$body.removeEventListener) === null || _document2$body$remov === void 0 ? void 0 : _document2$body$remov.call(_document2$body, 'keyup', this.handleEscape);\n    }\n  }\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps\n    } = this.props;\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n    const contentTranslateX = drawerType === 'front' || drawerType === 'permanent' ? 0 : this.translateX;\n    const drawerTranslateX = drawerType === 'permanent' ? 0 : drawerType === 'back' ? I18nManager.isRTL ? multiply(sub(this.containerWidth, this.drawerWidth), isRight ? 1 : -1) : 0 : this.translateX;\n    const offset = drawerType === 'back' ? 0 : I18nManager.isRTL ? '100%' : multiply(this.drawerWidth, -1); // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n\n    const hitSlop = isRight ? // Extend hitSlop to the side of the screen when drawer is closed\n    // This lets the user drag the drawer from the side of the screen\n    {\n      right: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    } : {\n      left: 0,\n      width: isOpen ? undefined : swipeEdgeWidth\n    };\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n    return /*#__PURE__*/React.createElement(PanGestureHandler, _extends({\n      activeOffsetX: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      failOffsetY: [-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM],\n      onGestureEvent: this.handleGestureEvent,\n      onHandlerStateChange: this.handleGestureStateChange,\n      hitSlop: hitSlop,\n      enabled: drawerType !== 'permanent' && gestureEnabled && swipeEnabled\n    }, gestureHandlerProps), /*#__PURE__*/React.createElement(Animated.View, {\n      onLayout: this.handleContainerLayout,\n      style: [styles.main, {\n        flexDirection: drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row'\n      }]\n    }, /*#__PURE__*/React.createElement(Animated.View, {\n      style: [styles.content, {\n        transform: [{\n          translateX: contentTranslateX\n        }]\n      }, sceneContainerStyle]\n    }, /*#__PURE__*/React.createElement(View, {\n      accessibilityElementsHidden: isOpen && drawerType !== 'permanent',\n      importantForAccessibility: isOpen && drawerType !== 'permanent' ? 'no-hide-descendants' : 'auto',\n      style: styles.content\n    }, renderSceneContent({\n      progress\n    })), // Disable overlay if sidebar is permanent\n    drawerType === 'permanent' ? null : Platform.OS === 'web' ? /*#__PURE__*/React.createElement(TouchableWithoutFeedback, {\n      onPress: gestureEnabled ? () => this.toggleDrawer(false) : undefined\n    }, /*#__PURE__*/React.createElement(Overlay, {\n      progress: progress,\n      style: overlayStyle\n    })) : /*#__PURE__*/React.createElement(TapGestureHandler, {\n      enabled: gestureEnabled,\n      onHandlerStateChange: this.handleTapStateChange\n    }, /*#__PURE__*/React.createElement(Overlay, {\n      progress: progress,\n      style: overlayStyle\n    }))), /*#__PURE__*/React.createElement(Animated.Code, {\n      // This is needed to make sure that container width updates with `setValue`\n      // Without this, it won't update when not used in styles\n      exec: this.containerWidth\n    }), drawerType === 'permanent' ? null : /*#__PURE__*/React.createElement(Animated.Code, {\n      exec: block([onChange(this.manuallyTriggerSpring, [cond(eq(this.manuallyTriggerSpring, TRUE), [set(this.nextIsOpen, FALSE), call([], () => this.currentOpenValue = false)])])])\n    }), /*#__PURE__*/React.createElement(Animated.View, {\n      accessibilityViewIsModal: isOpen && drawerType !== 'permanent',\n      removeClippedSubviews: Platform.OS !== 'ios',\n      onLayout: this.handleDrawerLayout,\n      style: [styles.container, {\n        transform: [{\n          translateX: drawerTranslateX\n        }],\n        opacity: this.drawerOpacity\n      }, drawerType === 'permanent' ? // Without this, the `left`/`right` values don't get reset\n      isRight ? {\n        right: 0\n      } : {\n        left: 0\n      } : [styles.nonPermanent, isRight ? {\n        right: offset\n      } : {\n        left: offset\n      }, {\n        zIndex: drawerType === 'back' ? -1 : 0\n      }], drawerStyle]\n    }, renderDrawerContent({\n      progress\n    }))));\n  }\n\n}\n\n_defineProperty(DrawerView, \"defaultProps\", {\n  drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n  drawerType: 'front',\n  gestureEnabled: true,\n  swipeEnabled: Platform.OS !== 'web',\n  swipeEdgeWidth: 32,\n  swipeVelocityThreshold: 500,\n  keyboardDismissMode: 'on-drag',\n  hideStatusBar: false,\n  statusBarAnimation: 'slide'\n});\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%'\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%'\n  },\n  content: {\n    flex: 1\n  },\n  main: _objectSpread({\n    flex: 1\n  }, Platform.select({\n    // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n    // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n    web: null,\n    default: {\n      overflow: 'hidden'\n    }\n  }))\n});","map":{"version":3,"sources":["Drawer.tsx"],"names":["sub","TRUE","FALSE","NOOP","UNSET","DIRECTION_LEFT","DIRECTION_RIGHT","SWIPE_DISTANCE_THRESHOLD_DEFAULT","SWIPE_DISTANCE_MINIMUM","SPRING_CONFIG","stiffness","damping","mass","overshootClamping","restDisplacementThreshold","restSpeedThreshold","ANIMATED_ONE","Animated","DrawerView","React","drawerPostion","I18nManager","drawerType","gestureEnabled","swipeEnabled","Platform","swipeEdgeWidth","swipeVelocityThreshold","keyboardDismissMode","hideStatusBar","statusBarAnimation","componentDidMount","componentDidUpdate","open","prevProps","drawerPosition","swipeDistanceThreshold","componentWillUnmount","e","onClose","InteractionManager","dimensions","width","StyleSheet","percentage","Number","GestureState","cond","eq","max","min","multiply","isOpen","toValue","frameTime","state","position","time","finished","velocity","block","clockRunning","set","startClock","call","spring","stopClock","Boolean","onChange","neq","value","Keyboard","add","or","and","greaterThan","abs","lessThan","divide","event","nativeEvent","x","translationX","velocityX","s","oldState","requestAnimationFrame","hidden","StatusBar","render","gestureHandlerProps","isRight","contentTranslateX","drawerTranslateX","offset","hitSlop","right","left","progress","styles","flexDirection","transform","translateX","content","renderSceneContent","undefined","overlayStyle","handleTapStateChange","containerWidth","opacity","drawerOpacity","zIndex","renderDrawerContent","container","backgroundColor","maxWidth","nonPermanent","top","bottom","flex","main","web","default","overflow"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  StyleSheet,\n  ViewStyle,\n  LayoutChangeEvent,\n  I18nManager,\n  Platform,\n  Keyboard,\n  StatusBar,\n  StyleProp,\n  View,\n  InteractionManager,\n  TouchableWithoutFeedback,\n} from 'react-native';\nimport Animated from 'react-native-reanimated';\nimport {\n  PanGestureHandler,\n  TapGestureHandler,\n  GestureState,\n} from './GestureHandler';\nimport Overlay from './Overlay';\n\nconst {\n  Clock,\n  Value,\n  onChange,\n  clockRunning,\n  startClock,\n  stopClock,\n  spring,\n  abs,\n  add,\n  and,\n  block,\n  call,\n  cond,\n  divide,\n  eq,\n  event,\n  greaterThan,\n  lessThan,\n  max,\n  min,\n  multiply,\n  neq,\n  or,\n  set,\n  sub,\n} = Animated;\n\nconst TRUE = 1;\nconst FALSE = 0;\nconst NOOP = 0;\nconst UNSET = -1;\n\nconst DIRECTION_LEFT = 1;\nconst DIRECTION_RIGHT = -1;\n\nconst SWIPE_DISTANCE_THRESHOLD_DEFAULT = 60;\n\nconst SWIPE_DISTANCE_MINIMUM = 5;\n\nconst SPRING_CONFIG = {\n  stiffness: 1000,\n  damping: 500,\n  mass: 3,\n  overshootClamping: true,\n  restDisplacementThreshold: 0.01,\n  restSpeedThreshold: 0.01,\n};\n\nconst ANIMATED_ONE = new Animated.Value(1);\n\ntype Binary = 0 | 1;\n\ntype Renderer = (props: { progress: Animated.Node<number> }) => React.ReactNode;\n\ntype Props = {\n  open: boolean;\n  onOpen: () => void;\n  onClose: () => void;\n  gestureEnabled: boolean;\n  swipeEnabled: boolean;\n  drawerPosition: 'left' | 'right';\n  drawerType: 'front' | 'back' | 'slide' | 'permanent';\n  keyboardDismissMode: 'none' | 'on-drag';\n  swipeEdgeWidth: number;\n  swipeDistanceThreshold?: number;\n  swipeVelocityThreshold: number;\n  hideStatusBar: boolean;\n  statusBarAnimation: 'slide' | 'none' | 'fade';\n  overlayStyle?: StyleProp<ViewStyle>;\n  drawerStyle?: StyleProp<ViewStyle>;\n  sceneContainerStyle?: StyleProp<ViewStyle>;\n  renderDrawerContent: Renderer;\n  renderSceneContent: Renderer;\n  gestureHandlerProps?: React.ComponentProps<typeof PanGestureHandler>;\n  dimensions: { width: number; height: number };\n};\n\nexport default class DrawerView extends React.Component<Props> {\n  static defaultProps = {\n    drawerPostion: I18nManager.isRTL ? 'left' : 'right',\n    drawerType: 'front',\n    gestureEnabled: true,\n    swipeEnabled: Platform.OS !== 'web',\n    swipeEdgeWidth: 32,\n    swipeVelocityThreshold: 500,\n    keyboardDismissMode: 'on-drag',\n    hideStatusBar: false,\n    statusBarAnimation: 'slide',\n  };\n\n  componentDidMount() {\n    if (Platform.OS === 'web') {\n      document?.body?.addEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  componentDidUpdate(prevProps: Props) {\n    const {\n      open,\n      drawerPosition,\n      drawerType,\n      swipeDistanceThreshold,\n      swipeVelocityThreshold,\n      hideStatusBar,\n    } = this.props;\n\n    if (\n      // If we're not in the middle of a transition, sync the drawer's open state\n      typeof this.pendingOpenValue !== 'boolean' ||\n      open !== this.pendingOpenValue\n    ) {\n      this.toggleDrawer(open);\n    }\n\n    this.pendingOpenValue = undefined;\n\n    if (open !== prevProps.open && hideStatusBar) {\n      this.toggleStatusBar(open);\n    }\n\n    if (prevProps.drawerPosition !== drawerPosition) {\n      this.drawerPosition.setValue(\n        drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n      );\n    }\n\n    if (prevProps.drawerType !== drawerType) {\n      this.isDrawerTypeFront.setValue(drawerType === 'front' ? TRUE : FALSE);\n    }\n\n    if (prevProps.swipeDistanceThreshold !== swipeDistanceThreshold) {\n      this.swipeDistanceThreshold.setValue(\n        swipeDistanceThreshold !== undefined\n          ? swipeDistanceThreshold\n          : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n      );\n    }\n\n    if (prevProps.swipeVelocityThreshold !== swipeVelocityThreshold) {\n      this.swipeVelocityThreshold.setValue(swipeVelocityThreshold);\n    }\n  }\n\n  componentWillUnmount() {\n    this.toggleStatusBar(false);\n    this.handleEndInteraction();\n\n    if (Platform.OS === 'web') {\n      document?.body?.removeEventListener?.('keyup', this.handleEscape);\n    }\n  }\n\n  private handleEscape = (e: KeyboardEvent) => {\n    const { open, onClose } = this.props;\n\n    if (e.key === 'Escape') {\n      if (open) {\n        onClose();\n      }\n    }\n  };\n\n  private handleEndInteraction = () => {\n    if (this.interactionHandle !== undefined) {\n      InteractionManager.clearInteractionHandle(this.interactionHandle);\n      this.interactionHandle = undefined;\n    }\n  };\n\n  private handleStartInteraction = () => {\n    if (this.interactionHandle === undefined) {\n      this.interactionHandle = InteractionManager.createInteractionHandle();\n    }\n  };\n\n  private getDrawerWidth = (): number => {\n    const { drawerStyle, dimensions } = this.props;\n    const { width } = StyleSheet.flatten(drawerStyle);\n\n    if (typeof width === 'string' && width.endsWith('%')) {\n      // Try to calculate width if a percentage is given\n      const percentage = Number(width.replace(/%$/, ''));\n\n      if (Number.isFinite(percentage)) {\n        return dimensions.width * (percentage / 100);\n      }\n    }\n\n    return typeof width === 'number' ? width : 0;\n  };\n\n  private clock = new Clock();\n  private interactionHandle: number | undefined;\n\n  private isDrawerTypeFront = new Value<Binary>(\n    this.props.drawerType === 'front' ? TRUE : FALSE\n  );\n\n  private isOpen = new Value<Binary>(this.props.open ? TRUE : FALSE);\n  private nextIsOpen = new Value<Binary | -1>(UNSET);\n  private isSwiping = new Value<Binary>(FALSE);\n\n  private initialDrawerWidth = this.getDrawerWidth();\n\n  private gestureState = new Value<number>(GestureState.UNDETERMINED);\n  private touchX = new Value<number>(0);\n  private velocityX = new Value<number>(0);\n  private gestureX = new Value<number>(0);\n  private offsetX = new Value<number>(0);\n  private position = new Value<number>(\n    this.props.open\n      ? this.initialDrawerWidth *\n        (this.props.drawerPosition === 'right'\n          ? DIRECTION_RIGHT\n          : DIRECTION_LEFT)\n      : 0\n  );\n\n  private containerWidth = new Value<number>(this.props.dimensions.width);\n  private drawerWidth = new Value<number>(this.initialDrawerWidth);\n  private drawerOpacity = new Value<number>(\n    this.initialDrawerWidth || this.props.drawerType === 'permanent' ? 1 : 0\n  );\n  private drawerPosition = new Value<number>(\n    this.props.drawerPosition === 'right' ? DIRECTION_RIGHT : DIRECTION_LEFT\n  );\n\n  // Comment stolen from react-native-gesture-handler/DrawerLayout\n  //\n  // While closing the drawer when user starts gesture outside of its area (in greyed\n  // out part of the window), we want the drawer to follow only once finger reaches the\n  // edge of the drawer.\n  // E.g. on the diagram below drawer is illustrate by X signs and the greyed out area by\n  // dots. The touch gesture starts at '*' and moves left, touch path is indicated by\n  // an arrow pointing left\n  // 1) +---------------+ 2) +---------------+ 3) +---------------+ 4) +---------------+\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|.<-*..|    |XXXXXXXX|<--*..|    |XXXXX|<-----*..|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXXXXX|......|    |XXXXX|.........|\n  //    +---------------+    +---------------+    +---------------+    +---------------+\n  //\n  // For the above to work properly we define animated value that will keep start position\n  // of the gesture. Then we use that value to calculate how much we need to subtract from\n  // the dragX. If the gesture started on the greyed out area we take the distance from the\n  // edge of the drawer to the start position. Otherwise we don't subtract at all and the\n  // drawer be pulled back as soon as you start the pan.\n  //\n  // This is used only when drawerType is \"front\"\n  private touchDistanceFromDrawer = cond(\n    this.isDrawerTypeFront,\n    cond(\n      eq(this.drawerPosition, DIRECTION_LEFT),\n      max(\n        // Distance of touch start from left screen edge - Drawer width\n        sub(sub(this.touchX, this.gestureX), this.drawerWidth),\n        0\n      ),\n      min(\n        multiply(\n          // Distance of drawer from left screen edge - Touch start point\n          sub(\n            sub(this.containerWidth, this.drawerWidth),\n            sub(this.touchX, this.gestureX)\n          ),\n          DIRECTION_RIGHT\n        ),\n        0\n      )\n    ),\n    0\n  );\n\n  private swipeDistanceThreshold = new Value<number>(\n    this.props.swipeDistanceThreshold !== undefined\n      ? this.props.swipeDistanceThreshold\n      : SWIPE_DISTANCE_THRESHOLD_DEFAULT\n  );\n  private swipeVelocityThreshold = new Value<number>(\n    this.props.swipeVelocityThreshold\n  );\n\n  private currentOpenValue: boolean = this.props.open;\n  private pendingOpenValue: boolean | undefined;\n\n  private isStatusBarHidden: boolean = false;\n\n  private manuallyTriggerSpring = new Value<Binary>(FALSE);\n\n  private transitionTo = (isOpen: number | Animated.Node<number>) => {\n    const toValue = new Value(0);\n    const frameTime = new Value(0);\n\n    const state = {\n      position: this.position,\n      time: new Value(0),\n      finished: new Value(FALSE),\n      velocity: new Value(0),\n    };\n\n    return block([\n      cond(clockRunning(this.clock), NOOP, [\n        // Animation wasn't running before\n        // Set the initial values and start the clock\n        set(toValue, multiply(isOpen, this.drawerWidth, this.drawerPosition)),\n        set(frameTime, 0),\n        set(state.time, 0),\n        set(state.finished, FALSE),\n        set(state.velocity, this.velocityX),\n        set(this.isOpen, isOpen),\n        startClock(this.clock),\n        call([], this.handleStartInteraction),\n        set(this.manuallyTriggerSpring, FALSE),\n      ]),\n      spring(this.clock, state, { ...SPRING_CONFIG, toValue }),\n      cond(state.finished, [\n        // Reset gesture and velocity from previous gesture\n        set(this.touchX, 0),\n        set(this.gestureX, 0),\n        set(this.velocityX, 0),\n        set(this.offsetX, 0),\n        // When the animation finishes, stop the clock\n        stopClock(this.clock),\n        call([this.isOpen], ([value]: readonly Binary[]) => {\n          const open = Boolean(value);\n          this.handleEndInteraction();\n\n          if (open !== this.props.open) {\n            // Sync drawer's state after animation finished\n            // This shouldn't be necessary, but there seems to be an issue on iOS\n            this.toggleDrawer(this.props.open);\n          }\n        }),\n      ]),\n    ]);\n  };\n\n  private dragX = block([\n    onChange(\n      this.isOpen,\n      call([this.isOpen], ([value]: readonly Binary[]) => {\n        const open = Boolean(value);\n\n        this.currentOpenValue = open;\n\n        // Without this check, the drawer can go to an infinite update <-> animate loop for sync updates\n        if (open !== this.props.open) {\n          // If the mode changed, update state\n          if (open) {\n            this.props.onOpen();\n          } else {\n            this.props.onClose();\n          }\n\n          this.pendingOpenValue = open;\n\n          // Force componentDidUpdate to fire, whether user does a setState or not\n          // This allows us to detect when the user drops the update and revert back\n          // It's necessary to make sure that the state stays in sync\n          this.forceUpdate();\n        }\n      })\n    ),\n    onChange(\n      this.nextIsOpen,\n      cond(neq(this.nextIsOpen, UNSET), [\n        // Stop any running animations\n        cond(clockRunning(this.clock), stopClock(this.clock)),\n        // Update the open value to trigger the transition\n        set(this.isOpen, this.nextIsOpen),\n        set(this.gestureX, 0),\n        set(this.nextIsOpen, UNSET),\n      ])\n    ),\n    // This block must be after the this.isOpen listener since we check for current value\n    onChange(\n      this.isSwiping,\n      // Listen to updates for this value only when it changes\n      // Without `onChange`, this will fire even if the value didn't change\n      // We don't want to call the listeners if the value didn't change\n      call([this.isSwiping], ([value]: readonly Binary[]) => {\n        const { keyboardDismissMode } = this.props;\n\n        if (value === TRUE) {\n          if (keyboardDismissMode === 'on-drag') {\n            Keyboard.dismiss();\n          }\n\n          this.toggleStatusBar(true);\n        } else {\n          this.toggleStatusBar(this.currentOpenValue);\n        }\n      })\n    ),\n    onChange(\n      this.gestureState,\n      cond(\n        eq(this.gestureState, GestureState.ACTIVE),\n        call([], this.handleStartInteraction)\n      )\n    ),\n    cond(\n      eq(this.gestureState, GestureState.ACTIVE),\n      [\n        cond(this.isSwiping, NOOP, [\n          // We weren't dragging before, set it to true\n          set(this.isSwiping, TRUE),\n          // Also update the drag offset to the last position\n          set(this.offsetX, this.position),\n        ]),\n        // Update position with previous offset + gesture distance\n        set(\n          this.position,\n          add(this.offsetX, this.gestureX, this.touchDistanceFromDrawer)\n        ),\n        // Stop animations while we're dragging\n        stopClock(this.clock),\n      ],\n      [\n        set(this.isSwiping, FALSE),\n        set(this.touchX, 0),\n        this.transitionTo(\n          cond(\n            this.manuallyTriggerSpring,\n            this.isOpen,\n            cond(\n              or(\n                and(\n                  greaterThan(abs(this.gestureX), SWIPE_DISTANCE_MINIMUM),\n                  greaterThan(abs(this.velocityX), this.swipeVelocityThreshold)\n                ),\n                greaterThan(abs(this.gestureX), this.swipeDistanceThreshold)\n              ),\n              cond(\n                eq(this.drawerPosition, DIRECTION_LEFT),\n                // If swiped to right, open the drawer, otherwise close it\n                greaterThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                ),\n                // If swiped to left, open the drawer, otherwise close it\n                lessThan(\n                  cond(eq(this.velocityX, 0), this.gestureX, this.velocityX),\n                  0\n                )\n              ),\n              this.isOpen\n            )\n          )\n        ),\n      ]\n    ),\n    this.position,\n  ]);\n\n  private translateX = cond(\n    eq(this.drawerPosition, DIRECTION_RIGHT),\n    min(max(multiply(this.drawerWidth, -1), this.dragX), 0),\n    max(min(this.drawerWidth, this.dragX), 0)\n  );\n\n  private progress = cond(\n    // Check if the drawer width is available to avoid division by zero\n    eq(this.drawerWidth, 0),\n    0,\n    abs(divide(this.translateX, this.drawerWidth))\n  );\n\n  private handleGestureEvent = event([\n    {\n      nativeEvent: {\n        x: this.touchX,\n        translationX: this.gestureX,\n        velocityX: this.velocityX,\n      },\n    },\n  ]);\n\n  private handleGestureStateChange = event([\n    {\n      nativeEvent: {\n        state: (s: Animated.Value<number>) => set(this.gestureState, s),\n      },\n    },\n  ]);\n\n  private handleTapStateChange = event([\n    {\n      nativeEvent: {\n        oldState: (s: Animated.Value<number>) =>\n          cond(\n            eq(s, GestureState.ACTIVE),\n            set(this.manuallyTriggerSpring, TRUE)\n          ),\n      },\n    },\n  ]);\n\n  private handleContainerLayout = (e: LayoutChangeEvent) =>\n    this.containerWidth.setValue(e.nativeEvent.layout.width);\n\n  private handleDrawerLayout = (e: LayoutChangeEvent) => {\n    this.drawerWidth.setValue(e.nativeEvent.layout.width);\n    this.toggleDrawer(this.props.open);\n\n    // Until layout is available, drawer is hidden with opacity: 0 by default\n    // Show it in the next frame when layout is available\n    // If we don't delay it until the next frame, there's a visible flicker\n    requestAnimationFrame(() =>\n      requestAnimationFrame(() => this.drawerOpacity.setValue(1))\n    );\n  };\n\n  private toggleDrawer = (open: boolean) => {\n    if (this.currentOpenValue !== open) {\n      this.nextIsOpen.setValue(open ? TRUE : FALSE);\n\n      // This value will also be set shortly after as changing this.nextIsOpen changes this.isOpen\n      // However, there's a race condition on Android, so we need to set a bit earlier\n      this.currentOpenValue = open;\n    }\n  };\n\n  private toggleStatusBar = (hidden: boolean) => {\n    const { hideStatusBar, statusBarAnimation } = this.props;\n\n    if (hideStatusBar && this.isStatusBarHidden !== hidden) {\n      this.isStatusBarHidden = hidden;\n      StatusBar.setHidden(hidden, statusBarAnimation);\n    }\n  };\n\n  render() {\n    const {\n      open,\n      gestureEnabled,\n      swipeEnabled,\n      drawerPosition,\n      drawerType,\n      swipeEdgeWidth,\n      sceneContainerStyle,\n      drawerStyle,\n      overlayStyle,\n      renderDrawerContent,\n      renderSceneContent,\n      gestureHandlerProps,\n    } = this.props;\n\n    const isOpen = drawerType === 'permanent' ? true : open;\n    const isRight = drawerPosition === 'right';\n\n    const contentTranslateX =\n      drawerType === 'front' || drawerType === 'permanent'\n        ? 0\n        : this.translateX;\n\n    const drawerTranslateX =\n      drawerType === 'permanent'\n        ? 0\n        : drawerType === 'back'\n        ? I18nManager.isRTL\n          ? multiply(\n              sub(this.containerWidth, this.drawerWidth),\n              isRight ? 1 : -1\n            )\n          : 0\n        : this.translateX;\n\n    const offset =\n      drawerType === 'back'\n        ? 0\n        : I18nManager.isRTL\n        ? '100%'\n        : multiply(this.drawerWidth, -1);\n\n    // FIXME: Currently hitSlop is broken when on Android when drawer is on right\n    // https://github.com/kmagiera/react-native-gesture-handler/issues/569\n    const hitSlop = isRight\n      ? // Extend hitSlop to the side of the screen when drawer is closed\n        // This lets the user drag the drawer from the side of the screen\n        { right: 0, width: isOpen ? undefined : swipeEdgeWidth }\n      : { left: 0, width: isOpen ? undefined : swipeEdgeWidth };\n\n    const progress = drawerType === 'permanent' ? ANIMATED_ONE : this.progress;\n\n    return (\n      <PanGestureHandler\n        activeOffsetX={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        failOffsetY={[-SWIPE_DISTANCE_MINIMUM, SWIPE_DISTANCE_MINIMUM]}\n        onGestureEvent={this.handleGestureEvent}\n        onHandlerStateChange={this.handleGestureStateChange}\n        hitSlop={hitSlop}\n        enabled={drawerType !== 'permanent' && gestureEnabled && swipeEnabled}\n        {...gestureHandlerProps}\n      >\n        <Animated.View\n          onLayout={this.handleContainerLayout}\n          style={[\n            styles.main,\n            {\n              flexDirection:\n                drawerType === 'permanent' && !isRight ? 'row-reverse' : 'row',\n            },\n          ]}\n        >\n          <Animated.View\n            style={[\n              styles.content,\n              { transform: [{ translateX: contentTranslateX }] },\n              sceneContainerStyle as any,\n            ]}\n          >\n            <View\n              accessibilityElementsHidden={isOpen && drawerType !== 'permanent'}\n              importantForAccessibility={\n                isOpen && drawerType !== 'permanent'\n                  ? 'no-hide-descendants'\n                  : 'auto'\n              }\n              style={styles.content}\n            >\n              {renderSceneContent({ progress })}\n            </View>\n            {\n              // Disable overlay if sidebar is permanent\n              drawerType === 'permanent' ? null : Platform.OS === 'web' ? (\n                <TouchableWithoutFeedback\n                  onPress={\n                    gestureEnabled ? () => this.toggleDrawer(false) : undefined\n                  }\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TouchableWithoutFeedback>\n              ) : (\n                <TapGestureHandler\n                  enabled={gestureEnabled}\n                  onHandlerStateChange={this.handleTapStateChange}\n                >\n                  <Overlay progress={progress} style={overlayStyle as any} />\n                </TapGestureHandler>\n              )\n            }\n          </Animated.View>\n          <Animated.Code\n            // This is needed to make sure that container width updates with `setValue`\n            // Without this, it won't update when not used in styles\n            exec={this.containerWidth}\n          />\n          {drawerType === 'permanent' ? null : (\n            <Animated.Code\n              exec={block([\n                onChange(this.manuallyTriggerSpring, [\n                  cond(eq(this.manuallyTriggerSpring, TRUE), [\n                    set(this.nextIsOpen, FALSE),\n                    call([], () => (this.currentOpenValue = false)),\n                  ]),\n                ]),\n              ])}\n            />\n          )}\n          <Animated.View\n            accessibilityViewIsModal={isOpen && drawerType !== 'permanent'}\n            removeClippedSubviews={Platform.OS !== 'ios'}\n            onLayout={this.handleDrawerLayout}\n            style={[\n              styles.container,\n              {\n                transform: [{ translateX: drawerTranslateX }],\n                opacity: this.drawerOpacity,\n              },\n              drawerType === 'permanent'\n                ? // Without this, the `left`/`right` values don't get reset\n                  isRight\n                  ? { right: 0 }\n                  : { left: 0 }\n                : [\n                    styles.nonPermanent,\n                    isRight ? { right: offset } : { left: offset },\n                    { zIndex: drawerType === 'back' ? -1 : 0 },\n                  ],\n              drawerStyle as any,\n            ]}\n          >\n            {renderDrawerContent({ progress })}\n          </Animated.View>\n        </Animated.View>\n      </PanGestureHandler>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    backgroundColor: 'white',\n    maxWidth: '100%',\n  },\n  nonPermanent: {\n    position: 'absolute',\n    top: 0,\n    bottom: 0,\n    width: '80%',\n  },\n  content: {\n    flex: 1,\n  },\n  main: {\n    flex: 1,\n    ...Platform.select({\n      // FIXME: We need to hide `overflowX` on Web so the translated content doesn't show offscreen.\n      // But adding `overflowX: 'hidden'` prevents content from collapsing the URL bar.\n      web: null,\n      default: { overflow: 'hidden' },\n    }),\n  },\n});\n"]},"metadata":{},"sourceType":"module"}