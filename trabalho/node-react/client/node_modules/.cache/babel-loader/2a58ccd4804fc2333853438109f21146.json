{"ast":null,"code":"/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\nfunction emptyFunction() {}\n\nvar AccessibilityInfo = {\n  /**\r\n   * Query whether a screen reader is currently enabled.\r\n   *\r\n   * Returns a promise which resolves to a boolean.\r\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\r\n   */\n  fetch: function fetch() {\n    return new Promise(function (resolve, reject) {\n      resolve(true);\n    });\n  },\n\n  /**\r\n   * Add an event handler. Supported events:\r\n   */\n  addEventListener: function addEventListener(eventName, handler) {\n    return {\n      remove: emptyFunction\n    };\n  },\n\n  /**\r\n   * Set accessibility focus to a react component.\r\n   */\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\n\n  /**\r\n   * Post a string to be announced by the screen reader.\r\n   */\n  announceForAccessibility: function announceForAccessibility(announcement) {},\n\n  /**\r\n   * Remove an event handler.\r\n   */\n  removeEventListener: function removeEventListener(eventName, handler) {\n    return;\n  }\n};\nexport default AccessibilityInfo;","map":{"version":3,"sources":["C:/Users/samuk_000/node-react/node_modules/react-native-web/dist/exports/AccessibilityInfo/index.js"],"names":["emptyFunction","AccessibilityInfo","fetch","Promise","resolve","reject","addEventListener","eventName","handler","remove","setAccessibilityFocus","reactTag","announceForAccessibility","announcement","removeEventListener"],"mappings":"AAAA;;;;;;;;AAQA,SAASA,aAAT,GAAyB,CAAE;;AAE3B,IAAIC,iBAAiB,GAAG;AACtB;;;;;;AAMAC,EAAAA,KAAK,EAAE,SAASA,KAAT,GAAiB;AACtB,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAC5CD,MAAAA,OAAO,CAAC,IAAD,CAAP;AACD,KAFM,CAAP;AAGD,GAXqB;;AAatB;;;AAGAE,EAAAA,gBAAgB,EAAE,SAASA,gBAAT,CAA0BC,SAA1B,EAAqCC,OAArC,EAA8C;AAC9D,WAAO;AACLC,MAAAA,MAAM,EAAET;AADH,KAAP;AAGD,GApBqB;;AAsBtB;;;AAGAU,EAAAA,qBAAqB,EAAE,SAASA,qBAAT,CAA+BC,QAA/B,EAAyC,CAAE,CAzB5C;;AA2BtB;;;AAGAC,EAAAA,wBAAwB,EAAE,SAASA,wBAAT,CAAkCC,YAAlC,EAAgD,CAAE,CA9BtD;;AAgCtB;;;AAGAC,EAAAA,mBAAmB,EAAE,SAASA,mBAAT,CAA6BP,SAA7B,EAAwCC,OAAxC,EAAiD;AACpE;AACD;AArCqB,CAAxB;AAuCA,eAAeP,iBAAf","sourcesContent":["/**\r\n * Copyright (c) Facebook, Inc. and its affiliates.\r\n *\r\n * This source code is licensed under the MIT license found in the\r\n * LICENSE file in the root directory of this source tree.\r\n *\r\n * \r\n */\r\nfunction emptyFunction() {}\r\n\r\nvar AccessibilityInfo = {\r\n  /**\r\n   * Query whether a screen reader is currently enabled.\r\n   *\r\n   * Returns a promise which resolves to a boolean.\r\n   * The result is `true` when a screen reader is enabled and `false` otherwise.\r\n   */\r\n  fetch: function fetch() {\r\n    return new Promise(function (resolve, reject) {\r\n      resolve(true);\r\n    });\r\n  },\r\n\r\n  /**\r\n   * Add an event handler. Supported events:\r\n   */\r\n  addEventListener: function addEventListener(eventName, handler) {\r\n    return {\r\n      remove: emptyFunction\r\n    };\r\n  },\r\n\r\n  /**\r\n   * Set accessibility focus to a react component.\r\n   */\r\n  setAccessibilityFocus: function setAccessibilityFocus(reactTag) {},\r\n\r\n  /**\r\n   * Post a string to be announced by the screen reader.\r\n   */\r\n  announceForAccessibility: function announceForAccessibility(announcement) {},\r\n\r\n  /**\r\n   * Remove an event handler.\r\n   */\r\n  removeEventListener: function removeEventListener(eventName, handler) {\r\n    return;\r\n  }\r\n};\r\nexport default AccessibilityInfo;"]},"metadata":{},"sourceType":"module"}