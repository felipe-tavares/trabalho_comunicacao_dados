{"ast":null,"code":"function _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n  if (source == null) return {};\n\n  var target = _objectWithoutPropertiesLoose(source, excluded);\n\n  var key, i;\n\n  if (Object.getOwnPropertySymbols) {\n    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n\n    for (i = 0; i < sourceSymbolKeys.length; i++) {\n      key = sourceSymbolKeys[i];\n      if (excluded.indexOf(key) >= 0) continue;\n      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n      target[key] = source[key];\n    }\n  }\n\n  return target;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport * as React from 'react';\nimport { Text, View, StyleSheet, Platform } from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\nconst Touchable = _ref => {\n  let {\n    children,\n    style,\n    onPress: _onPress,\n    to,\n    accessibilityRole,\n    delayPressIn\n  } = _ref,\n      rest = _objectWithoutProperties(_ref, [\"children\", \"style\", \"onPress\", \"to\", \"accessibilityRole\", \"delayPressIn\"]);\n\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return /*#__PURE__*/React.createElement(Link, _extends({}, rest, {\n      to: to,\n      style: [styles.button, style],\n      onPress: e => {\n        if (!(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && ( // ignore clicks with modifier keys\n        e.button == null || e.button === 0) // ignore everything but left clicks\n        ) {\n            e.preventDefault();\n            _onPress === null || _onPress === void 0 ? void 0 : _onPress(e);\n          }\n      }\n    }), children);\n  } else {\n    return /*#__PURE__*/React.createElement(TouchableItem, _extends({}, rest, {\n      accessibilityRole: accessibilityRole,\n      delayPressIn: delayPressIn,\n      onPress: _onPress\n    }), /*#__PURE__*/React.createElement(View, {\n      style: style\n    }, children));\n  }\n};\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\n\n\nexport default function DrawerItem(props) {\n  const {\n    colors\n  } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress\n  } = props,\n        rest = _objectWithoutProperties(props, [\"icon\", \"label\", \"labelStyle\", \"to\", \"focused\", \"activeTintColor\", \"inactiveTintColor\", \"activeBackgroundColor\", \"inactiveBackgroundColor\", \"style\", \"onPress\"]);\n\n  const {\n    borderRadius = 4\n  } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused ? activeBackgroundColor : inactiveBackgroundColor;\n  const iconNode = icon ? icon({\n    size: 24,\n    focused,\n    color\n  }) : null;\n  return /*#__PURE__*/React.createElement(View, _extends({\n    collapsable: false\n  }, rest, {\n    style: [styles.container, {\n      borderRadius,\n      backgroundColor\n    }, style]\n  }), /*#__PURE__*/React.createElement(Touchable, {\n    delayPressIn: 0,\n    onPress: onPress,\n    style: [styles.wrapper, {\n      borderRadius\n    }],\n    accessibilityTraits: focused ? ['button', 'selected'] : 'button',\n    accessibilityComponentType: \"button\",\n    accessibilityRole: \"button\",\n    accessibilityStates: focused ? ['selected'] : [],\n    to: to\n  }, /*#__PURE__*/React.createElement(React.Fragment, null, iconNode, /*#__PURE__*/React.createElement(View, {\n    style: [styles.label, {\n      marginLeft: iconNode ? 32 : 0,\n      marginVertical: 5\n    }]\n  }, typeof label === 'string' ? /*#__PURE__*/React.createElement(Text, {\n    numberOfLines: 1,\n    style: [{\n      color,\n      fontWeight: '500'\n    }, labelStyle]\n  }, label) : label({\n    color,\n    focused\n  })))));\n}\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden'\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8\n  },\n  label: {\n    marginRight: 32\n  },\n  button: {\n    display: 'flex'\n  }\n});","map":{"version":3,"sources":["DrawerItem.tsx"],"names":["Touchable","onPress","delayPressIn","rest","Platform","styles","e","style","colors","useTheme","focused","activeTintColor","inactiveTintColor","Color","activeBackgroundColor","inactiveBackgroundColor","borderRadius","StyleSheet","color","backgroundColor","iconNode","icon","size","to","marginLeft","marginVertical","fontWeight","label","container","marginHorizontal","overflow","wrapper","flexDirection","alignItems","padding","marginRight","button","display"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  Text,\n  View,\n  StyleSheet,\n  StyleProp,\n  ViewStyle,\n  TextStyle,\n  Platform,\n  TouchableWithoutFeedbackProps,\n} from 'react-native';\nimport { Link, useTheme } from '@react-navigation/native';\nimport Color from 'color';\nimport TouchableItem from './TouchableItem';\n\ntype Props = {\n  /**\n   * The label text of the item.\n   */\n  label:\n    | string\n    | ((props: { focused: boolean; color: string }) => React.ReactNode);\n  /**\n   * Icon to display for the `DrawerItem`.\n   */\n  icon?: (props: {\n    focused: boolean;\n    size: number;\n    color: string;\n  }) => React.ReactNode;\n  /**\n   * URL to use for the link to the tab.\n   */\n  to?: string;\n  /**\n   * Whether to highlight the drawer item as active.\n   */\n  focused?: boolean;\n  /**\n   * Function to execute on press.\n   */\n  onPress: () => void;\n  /**\n   * Color for the icon and label when the item is active.\n   */\n  activeTintColor?: string;\n  /**\n   * Color for the icon and label when the item is inactive.\n   */\n  inactiveTintColor?: string;\n  /**\n   * Background color for item when its active.\n   */\n  activeBackgroundColor?: string;\n  /**\n   * Background color for item when its inactive.\n   */\n  inactiveBackgroundColor?: string;\n  /**\n   * Style object for the label element.\n   */\n  labelStyle?: StyleProp<TextStyle>;\n  /**\n   * Style object for the wrapper element.\n   */\n  style?: StyleProp<ViewStyle>;\n};\n\nconst Touchable = ({\n  children,\n  style,\n  onPress,\n  to,\n  accessibilityRole,\n  delayPressIn,\n  ...rest\n}: TouchableWithoutFeedbackProps & {\n  to?: string;\n  children: React.ReactNode;\n  onPress?: () => void;\n}) => {\n  if (Platform.OS === 'web' && to) {\n    // React Native Web doesn't forward `onClick` if we use `TouchableWithoutFeedback`.\n    // We need to use `onClick` to be able to prevent default browser handling of links.\n    return (\n      <Link\n        {...rest}\n        to={to}\n        style={[styles.button, style]}\n        onPress={(e: any) => {\n          if (\n            !(e.metaKey || e.altKey || e.ctrlKey || e.shiftKey) && // ignore clicks with modifier keys\n            (e.button == null || e.button === 0) // ignore everything but left clicks\n          ) {\n            e.preventDefault();\n            onPress?.(e);\n          }\n        }}\n      >\n        {children}\n      </Link>\n    );\n  } else {\n    return (\n      <TouchableItem\n        {...rest}\n        accessibilityRole={accessibilityRole}\n        delayPressIn={delayPressIn}\n        onPress={onPress}\n      >\n        <View style={style}>{children}</View>\n      </TouchableItem>\n    );\n  }\n};\n\n/**\n * A component used to show an action item with an icon and a label in a navigation drawer.\n */\nexport default function DrawerItem(props: Props) {\n  const { colors } = useTheme();\n\n  const {\n    icon,\n    label,\n    labelStyle,\n    to,\n    focused = false,\n    activeTintColor = colors.primary,\n    inactiveTintColor = Color(colors.text).alpha(0.68).rgb().string(),\n    activeBackgroundColor = Color(activeTintColor).alpha(0.12).rgb().string(),\n    inactiveBackgroundColor = 'transparent',\n    style,\n    onPress,\n    ...rest\n  } = props;\n\n  const { borderRadius = 4 } = StyleSheet.flatten(style || {});\n  const color = focused ? activeTintColor : inactiveTintColor;\n  const backgroundColor = focused\n    ? activeBackgroundColor\n    : inactiveBackgroundColor;\n\n  const iconNode = icon ? icon({ size: 24, focused, color }) : null;\n\n  return (\n    <View\n      collapsable={false}\n      {...rest}\n      style={[styles.container, { borderRadius, backgroundColor }, style]}\n    >\n      <Touchable\n        delayPressIn={0}\n        onPress={onPress}\n        style={[styles.wrapper, { borderRadius }]}\n        accessibilityTraits={focused ? ['button', 'selected'] : 'button'}\n        accessibilityComponentType=\"button\"\n        accessibilityRole=\"button\"\n        accessibilityStates={focused ? ['selected'] : []}\n        to={to}\n      >\n        <React.Fragment>\n          {iconNode}\n          <View\n            style={[\n              styles.label,\n              { marginLeft: iconNode ? 32 : 0, marginVertical: 5 },\n            ]}\n          >\n            {typeof label === 'string' ? (\n              <Text\n                numberOfLines={1}\n                style={[\n                  {\n                    color,\n                    fontWeight: '500',\n                  },\n                  labelStyle,\n                ]}\n              >\n                {label}\n              </Text>\n            ) : (\n              label({ color, focused })\n            )}\n          </View>\n        </React.Fragment>\n      </Touchable>\n    </View>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    marginHorizontal: 10,\n    marginVertical: 4,\n    overflow: 'hidden',\n  },\n  wrapper: {\n    flexDirection: 'row',\n    alignItems: 'center',\n    padding: 8,\n  },\n  label: {\n    marginRight: 32,\n  },\n  button: {\n    display: 'flex',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}