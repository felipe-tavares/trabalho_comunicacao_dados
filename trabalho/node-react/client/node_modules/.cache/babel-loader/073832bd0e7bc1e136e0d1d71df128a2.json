{"ast":null,"code":"function ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport * as React from 'react';\nimport { View, Dimensions, StyleSheet, I18nManager, Platform, BackHandler } from 'react-native'; // eslint-disable-next-line import/no-unresolved\n\nimport { ScreenContainer } from 'react-native-screens';\nimport { NavigationHelpersContext, DrawerActions, useTheme } from '@react-navigation/native';\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? isLandscape ? 32 : 44 : 56;\n  const maxWidth = isTablet ? 320 : 280;\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView !== null && GestureHandlerRootView !== void 0 ? GestureHandlerRootView : View;\n/**\n * Component that renders the drawer.\n */\n\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = props => /*#__PURE__*/React.createElement(DrawerContent, props),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle\n}) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [dimensions, setDimensions] = React.useState(() => Dimensions.get('window'));\n  const {\n    colors\n  } = useTheme();\n  const isDrawerOpen = state.history.some(it => it.type === 'drawer');\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.openDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch(_objectSpread(_objectSpread({}, DrawerActions.closeDrawer()), {}, {\n      target: state.key\n    }));\n  }, [navigation, state.key]);\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({\n        type: 'drawerOpen'\n      });\n    } else {\n      navigation.emit({\n        type: 'drawerClose'\n      });\n    }\n  }, [isDrawerOpen, navigation]);\n  React.useEffect(() => {\n    let subscription;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n        return true;\n      });\n    }\n\n    return () => {\n      var _subscription;\n\n      return (_subscription = subscription) === null || _subscription === void 0 ? void 0 : _subscription.remove();\n    };\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n  React.useEffect(() => {\n    const updateDimensions = ({\n      window\n    }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', updateDimensions);\n    return () => Dimensions.removeEventListener('change', updateDimensions);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({\n    progress\n  }) => {\n    return /*#__PURE__*/React.createElement(DrawerPositionContext.Provider, {\n      value: drawerPosition\n    }, drawerContent(_objectSpread(_objectSpread({}, drawerContentOptions), {}, {\n      progress: progress,\n      state: state,\n      navigation: navigation,\n      descriptors: descriptors\n    })));\n  };\n\n  const renderContent = () => {\n    return /*#__PURE__*/React.createElement(ScreenContainer, {\n      style: styles.content\n    }, state.routes.map((route, index) => {\n      const descriptor = descriptors[route.key];\n      const {\n        unmountOnBlur\n      } = descriptor.options;\n      const isFocused = state.index === index;\n\n      if (unmountOnBlur && !isFocused) {\n        return null;\n      }\n\n      if (lazy && !loaded.includes(index) && !isFocused) {\n        // Don't render a screen if we've never navigated to it\n        return null;\n      }\n\n      return /*#__PURE__*/React.createElement(ResourceSavingScene, {\n        key: route.key,\n        style: [StyleSheet.absoluteFill, {\n          opacity: isFocused ? 1 : 0\n        }],\n        isVisible: isFocused\n      }, descriptor.render());\n    }));\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const {\n    gestureEnabled,\n    swipeEnabled\n  } = descriptors[activeKey].options;\n  return /*#__PURE__*/React.createElement(NavigationHelpersContext.Provider, {\n    value: navigation\n  }, /*#__PURE__*/React.createElement(GestureHandlerWrapper, {\n    style: styles.content\n  }, /*#__PURE__*/React.createElement(SafeAreaProviderCompat, null, /*#__PURE__*/React.createElement(DrawerOpenContext.Provider, {\n    value: isDrawerOpen\n  }, /*#__PURE__*/React.createElement(Drawer, {\n    open: isDrawerOpen,\n    gestureEnabled: gestureEnabled,\n    swipeEnabled: swipeEnabled,\n    onOpen: handleDrawerOpen,\n    onClose: handleDrawerClose,\n    gestureHandlerProps: gestureHandlerProps,\n    drawerType: drawerType,\n    drawerPosition: drawerPosition,\n    sceneContainerStyle: [{\n      backgroundColor: colors.background\n    }, sceneContainerStyle],\n    drawerStyle: [{\n      width: getDefaultDrawerWidth(dimensions),\n      backgroundColor: colors.card\n    }, drawerType === 'permanent' && (drawerPosition === 'left' ? {\n      borderRightColor: colors.border,\n      borderRightWidth: StyleSheet.hairlineWidth\n    } : {\n      borderLeftColor: colors.border,\n      borderLeftWidth: StyleSheet.hairlineWidth\n    }), drawerStyle],\n    overlayStyle: {\n      backgroundColor: overlayColor\n    },\n    swipeEdgeWidth: edgeWidth,\n    swipeDistanceThreshold: minSwipeDistance,\n    hideStatusBar: hideStatusBar,\n    statusBarAnimation: statusBarAnimation,\n    renderDrawerContent: renderNavigationView,\n    renderSceneContent: renderContent,\n    keyboardDismissMode: keyboardDismissMode,\n    drawerPostion: drawerPosition,\n    dimensions: dimensions\n  })))));\n}\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1\n  }\n});","map":{"version":3,"sources":["DrawerView.tsx"],"names":["getDefaultDrawerWidth","width","smallerAxisSize","Math","isLandscape","isTablet","appBarHeight","Platform","maxWidth","GestureHandlerWrapper","GestureHandlerRootView","lazy","drawerContent","props","drawerPosition","I18nManager","keyboardDismissMode","overlayColor","drawerType","hideStatusBar","statusBarAnimation","sceneContainerStyle","React","state","Dimensions","colors","useTheme","isDrawerOpen","it","handleDrawerOpen","navigation","DrawerActions","target","key","handleDrawerClose","type","subscription","updateDimensions","window","setDimensions","loaded","setLoaded","renderNavigationView","progress","descriptors","renderContent","styles","content","descriptor","route","unmountOnBlur","isFocused","StyleSheet","opacity","activeKey","swipeEnabled","backgroundColor","background","card","borderRightColor","borderRightWidth","hairlineWidth","borderLeftColor","borderLeftWidth","dimensions","flex"],"mappings":"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","sourcesContent":["import * as React from 'react';\nimport {\n  View,\n  Dimensions,\n  StyleSheet,\n  I18nManager,\n  Platform,\n  ScaledSize,\n  BackHandler,\n  NativeEventSubscription,\n} from 'react-native';\n// eslint-disable-next-line import/no-unresolved\nimport { ScreenContainer } from 'react-native-screens';\nimport {\n  NavigationHelpersContext,\n  DrawerNavigationState,\n  DrawerActions,\n  useTheme,\n} from '@react-navigation/native';\n\nimport { GestureHandlerRootView } from './GestureHandler';\nimport SafeAreaProviderCompat from './SafeAreaProviderCompat';\nimport ResourceSavingScene from './ResourceSavingScene';\nimport DrawerContent from './DrawerContent';\nimport Drawer from './Drawer';\nimport {\n  DrawerDescriptorMap,\n  DrawerNavigationConfig,\n  DrawerNavigationHelpers,\n  DrawerContentComponentProps,\n} from '../types';\nimport DrawerOpenContext from '../utils/DrawerOpenContext';\nimport DrawerPositionContext from '../utils/DrawerPositionContext';\n\ntype Props = DrawerNavigationConfig & {\n  state: DrawerNavigationState;\n  navigation: DrawerNavigationHelpers;\n  descriptors: DrawerDescriptorMap;\n};\n\nconst getDefaultDrawerWidth = ({\n  height,\n  width,\n}: {\n  height: number;\n  width: number;\n}) => {\n  /*\n   * Default drawer width is screen width - header height\n   * with a max width of 280 on mobile and 320 on tablet\n   * https://material.io/guidelines/patterns/navigation-drawer.html\n   */\n  const smallerAxisSize = Math.min(height, width);\n  const isLandscape = width > height;\n  const isTablet = smallerAxisSize >= 600;\n  const appBarHeight = Platform.OS === 'ios' ? (isLandscape ? 32 : 44) : 56;\n  const maxWidth = isTablet ? 320 : 280;\n\n  return Math.min(smallerAxisSize - appBarHeight, maxWidth);\n};\n\nconst GestureHandlerWrapper = GestureHandlerRootView ?? View;\n\n/**\n * Component that renders the drawer.\n */\nexport default function DrawerView({\n  state,\n  navigation,\n  descriptors,\n  lazy = true,\n  drawerContent = (props: DrawerContentComponentProps) => (\n    <DrawerContent {...props} />\n  ),\n  drawerPosition = I18nManager.isRTL ? 'right' : 'left',\n  keyboardDismissMode = 'on-drag',\n  overlayColor = 'rgba(0, 0, 0, 0.5)',\n  drawerType = 'front',\n  hideStatusBar = false,\n  statusBarAnimation = 'slide',\n  drawerContentOptions,\n  drawerStyle,\n  edgeWidth,\n  gestureHandlerProps,\n  minSwipeDistance,\n  sceneContainerStyle,\n}: Props) {\n  const [loaded, setLoaded] = React.useState([state.index]);\n  const [dimensions, setDimensions] = React.useState(() =>\n    Dimensions.get('window')\n  );\n\n  const { colors } = useTheme();\n\n  const isDrawerOpen = state.history.some((it) => it.type === 'drawer');\n\n  const handleDrawerOpen = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.openDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  const handleDrawerClose = React.useCallback(() => {\n    navigation.dispatch({\n      ...DrawerActions.closeDrawer(),\n      target: state.key,\n    });\n  }, [navigation, state.key]);\n\n  React.useEffect(() => {\n    if (isDrawerOpen) {\n      navigation.emit({ type: 'drawerOpen' });\n    } else {\n      navigation.emit({ type: 'drawerClose' });\n    }\n  }, [isDrawerOpen, navigation]);\n\n  React.useEffect(() => {\n    let subscription: NativeEventSubscription | undefined;\n\n    if (isDrawerOpen) {\n      // We only add the subscription when drawer opens\n      // This way we can make sure that the subscription is added as late as possible\n      // This will make sure that our handler will run first when back button is pressed\n      subscription = BackHandler.addEventListener('hardwareBackPress', () => {\n        handleDrawerClose();\n\n        return true;\n      });\n    }\n\n    return () => subscription?.remove();\n  }, [handleDrawerClose, isDrawerOpen, navigation, state.key]);\n\n  React.useEffect(() => {\n    const updateDimensions = ({ window }: { window: ScaledSize }) => {\n      setDimensions(window);\n    };\n\n    Dimensions.addEventListener('change', updateDimensions);\n\n    return () => Dimensions.removeEventListener('change', updateDimensions);\n  }, []);\n\n  if (!loaded.includes(state.index)) {\n    setLoaded([...loaded, state.index]);\n  }\n\n  const renderNavigationView = ({ progress }: any) => {\n    return (\n      <DrawerPositionContext.Provider value={drawerPosition}>\n        {drawerContent({\n          ...drawerContentOptions,\n          progress: progress,\n          state: state,\n          navigation: navigation,\n          descriptors: descriptors,\n        })}\n      </DrawerPositionContext.Provider>\n    );\n  };\n\n  const renderContent = () => {\n    return (\n      <ScreenContainer style={styles.content}>\n        {state.routes.map((route, index) => {\n          const descriptor = descriptors[route.key];\n          const { unmountOnBlur } = descriptor.options;\n          const isFocused = state.index === index;\n\n          if (unmountOnBlur && !isFocused) {\n            return null;\n          }\n\n          if (lazy && !loaded.includes(index) && !isFocused) {\n            // Don't render a screen if we've never navigated to it\n            return null;\n          }\n\n          return (\n            <ResourceSavingScene\n              key={route.key}\n              style={[StyleSheet.absoluteFill, { opacity: isFocused ? 1 : 0 }]}\n              isVisible={isFocused}\n            >\n              {descriptor.render()}\n            </ResourceSavingScene>\n          );\n        })}\n      </ScreenContainer>\n    );\n  };\n\n  const activeKey = state.routes[state.index].key;\n  const { gestureEnabled, swipeEnabled } = descriptors[activeKey].options;\n\n  return (\n    <NavigationHelpersContext.Provider value={navigation}>\n      <GestureHandlerWrapper style={styles.content}>\n        <SafeAreaProviderCompat>\n          <DrawerOpenContext.Provider value={isDrawerOpen}>\n            <Drawer\n              open={isDrawerOpen}\n              gestureEnabled={gestureEnabled}\n              swipeEnabled={swipeEnabled}\n              onOpen={handleDrawerOpen}\n              onClose={handleDrawerClose}\n              gestureHandlerProps={gestureHandlerProps}\n              drawerType={drawerType}\n              drawerPosition={drawerPosition}\n              sceneContainerStyle={[\n                { backgroundColor: colors.background },\n                sceneContainerStyle,\n              ]}\n              drawerStyle={[\n                {\n                  width: getDefaultDrawerWidth(dimensions),\n                  backgroundColor: colors.card,\n                },\n                drawerType === 'permanent' &&\n                  (drawerPosition === 'left'\n                    ? {\n                        borderRightColor: colors.border,\n                        borderRightWidth: StyleSheet.hairlineWidth,\n                      }\n                    : {\n                        borderLeftColor: colors.border,\n                        borderLeftWidth: StyleSheet.hairlineWidth,\n                      }),\n                drawerStyle,\n              ]}\n              overlayStyle={{ backgroundColor: overlayColor }}\n              swipeEdgeWidth={edgeWidth}\n              swipeDistanceThreshold={minSwipeDistance}\n              hideStatusBar={hideStatusBar}\n              statusBarAnimation={statusBarAnimation}\n              renderDrawerContent={renderNavigationView}\n              renderSceneContent={renderContent}\n              keyboardDismissMode={keyboardDismissMode}\n              drawerPostion={drawerPosition}\n              dimensions={dimensions}\n            />\n          </DrawerOpenContext.Provider>\n        </SafeAreaProviderCompat>\n      </GestureHandlerWrapper>\n    </NavigationHelpersContext.Provider>\n  );\n}\n\nconst styles = StyleSheet.create({\n  content: {\n    flex: 1,\n  },\n});\n"]},"metadata":{},"sourceType":"module"}