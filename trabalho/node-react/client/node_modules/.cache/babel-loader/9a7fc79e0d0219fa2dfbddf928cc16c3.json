{"ast":null,"code":"import DiscreteGestureHandler from './DiscreteGestureHandler';\nimport * as NodeManager from './NodeManager';\nimport PressGestureHandler from './PressGestureHandler';\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\n\nclass NativeViewGestureHandler extends PressGestureHandler {\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    if (!ev.isFinal) {\n      // if (this.ref instanceof ScrollView) {\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({\n        x: ev.deltaX,\n        y: ev.deltaY\n      }), 10)) {\n        if (this.config.disallowInterruption) {\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\n            const {\n              handlerTag,\n              view,\n              isGestureRunning\n            } = gesture;\n            return (// Check if this gesture isn't self\n              handlerTag !== this.handlerTag && // Ensure the gesture needs to be cancelled\n              isGestureRunning && // ScrollView can cancel discrete gestures like taps and presses\n              gesture instanceof DiscreteGestureHandler && // Ensure a view exists and is a child of the current view\n              view && this.view.contains(view)\n            );\n          }); // Cancel all of the gestures that passed the filter\n\n          for (const gesture of gestures) {\n            // TODO: Bacon: Send some cached event.\n            gesture.forceInvalidate(ev);\n          }\n        }\n      }\n    }\n  }\n\n}\n\nexport default NativeViewGestureHandler;","map":{"version":3,"sources":["C:/Users/samuk_000/node-react/node_modules/react-native-gesture-handler/web/NativeViewGestureHandler.js"],"names":["DiscreteGestureHandler","NodeManager","PressGestureHandler","TEST_MIN_IF_NOT_NAN","VEC_LEN_SQ","NativeViewGestureHandler","onRawEvent","ev","isFinal","x","deltaX","y","deltaY","config","disallowInterruption","gestures","Object","values","getNodes","filter","gesture","handlerTag","view","isGestureRunning","contains","forceInvalidate"],"mappings":"AAAA,OAAOA,sBAAP,MAAmC,0BAAnC;AACA,OAAO,KAAKC,WAAZ,MAA6B,eAA7B;AACA,OAAOC,mBAAP,MAAgC,uBAAhC;AACA,SAASC,mBAAT,EAA8BC,UAA9B,QAAgD,SAAhD;;AAEA,MAAMC,wBAAN,SAAuCH,mBAAvC,CAA2D;AACzDI,EAAAA,UAAU,CAACC,EAAD,EAAK;AACb,UAAMD,UAAN,CAAiBC,EAAjB;;AACA,QAAI,CAACA,EAAE,CAACC,OAAR,EAAiB;AACf;AACA,UAAIL,mBAAmB,CAACC,UAAU,CAAC;AAAEK,QAAAA,CAAC,EAAEF,EAAE,CAACG,MAAR;AAAgBC,QAAAA,CAAC,EAAEJ,EAAE,CAACK;AAAtB,OAAD,CAAX,EAA6C,EAA7C,CAAvB,EAAyE;AACvE,YAAI,KAAKC,MAAL,CAAYC,oBAAhB,EAAsC;AACpC,gBAAMC,QAAQ,GAAGC,MAAM,CAACC,MAAP,CAAchB,WAAW,CAACiB,QAAZ,EAAd,EAAsCC,MAAtC,CAA6CC,OAAO,IAAI;AACvE,kBAAM;AAAEC,cAAAA,UAAF;AAAcC,cAAAA,IAAd;AAAoBC,cAAAA;AAApB,gBAAyCH,OAA/C;AACA,mBACE;AACAC,cAAAA,UAAU,KAAK,KAAKA,UAApB,IACA;AACAE,cAAAA,gBAFA,IAGA;AACAH,cAAAA,OAAO,YAAYpB,sBAJnB,IAKA;AACAsB,cAAAA,IANA,IAOA,KAAKA,IAAL,CAAUE,QAAV,CAAmBF,IAAnB;AATF;AAWD,WAbgB,CAAjB,CADoC,CAepC;;AACA,eAAK,MAAMF,OAAX,IAAsBL,QAAtB,EAAgC;AAC9B;AACAK,YAAAA,OAAO,CAACK,eAAR,CAAwBlB,EAAxB;AACD;AACF;AACF;AACF;AACF;;AA7BwD;;AAgC3D,eAAeF,wBAAf","sourcesContent":["import DiscreteGestureHandler from './DiscreteGestureHandler';\r\nimport * as NodeManager from './NodeManager';\r\nimport PressGestureHandler from './PressGestureHandler';\r\nimport { TEST_MIN_IF_NOT_NAN, VEC_LEN_SQ } from './utils';\r\n\r\nclass NativeViewGestureHandler extends PressGestureHandler {\r\n  onRawEvent(ev) {\r\n    super.onRawEvent(ev);\r\n    if (!ev.isFinal) {\r\n      // if (this.ref instanceof ScrollView) {\r\n      if (TEST_MIN_IF_NOT_NAN(VEC_LEN_SQ({ x: ev.deltaX, y: ev.deltaY }), 10)) {\r\n        if (this.config.disallowInterruption) {\r\n          const gestures = Object.values(NodeManager.getNodes()).filter(gesture => {\r\n            const { handlerTag, view, isGestureRunning } = gesture;\r\n            return (\r\n              // Check if this gesture isn't self\r\n              handlerTag !== this.handlerTag &&\r\n              // Ensure the gesture needs to be cancelled\r\n              isGestureRunning &&\r\n              // ScrollView can cancel discrete gestures like taps and presses\r\n              gesture instanceof DiscreteGestureHandler &&\r\n              // Ensure a view exists and is a child of the current view\r\n              view &&\r\n              this.view.contains(view)\r\n            );\r\n          });\r\n          // Cancel all of the gestures that passed the filter\r\n          for (const gesture of gestures) {\r\n            // TODO: Bacon: Send some cached event.\r\n            gesture.forceInvalidate(ev);\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport default NativeViewGestureHandler;\r\n"]},"metadata":{},"sourceType":"module"}