{"ast":null,"code":"import Hammer from '@egjs/hammerjs';\nimport { Direction } from './constants';\nimport { GesturePropError } from './Errors';\nimport DraggingGestureHandler from './DraggingGestureHandler';\nimport { isnan } from './utils';\n\nclass FlingGestureHandler extends DraggingGestureHandler {\n  get name() {\n    return 'swipe';\n  }\n\n  get NativeGestureClass() {\n    return Hammer.Swipe;\n  }\n\n  onGestureActivated(event) {\n    this.sendEvent({ ...event,\n      eventType: Hammer.INPUT_MOVE,\n      isFinal: false,\n      isFirst: true\n    });\n    this.isGestureRunning = false;\n    this.hasGestureFailed = false;\n    this.sendEvent({ ...event,\n      eventType: Hammer.INPUT_END,\n      isFinal: true\n    });\n  }\n\n  onRawEvent(ev) {\n    super.onRawEvent(ev);\n\n    if (this.hasGestureFailed) {\n      return;\n    } // Hammer doesn't send a `cancel` event for taps.\n    // Manually fail the event.\n\n\n    if (ev.isFinal) {\n      setTimeout(() => {\n        if (this.isGestureRunning) {\n          this.cancelEvent(ev);\n        }\n      });\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\n      // Tap Gesture start event\n      const gesture = this.hammer.get(this.name);\n\n      if (gesture.options.enable(gesture, ev)) {\n        this.onStart(ev);\n        this.sendEvent(ev);\n      }\n    }\n  }\n\n  getHammerConfig() {\n    return {\n      pointers: this.config.numberOfPointers,\n      direction: this.getDirection()\n    };\n  }\n\n  getTargetDirections(direction) {\n    const directions = [];\n\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_RIGHT);\n    }\n\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_LEFT);\n    }\n\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_UP);\n    }\n\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_DOWN);\n    } // const hammerDirection = directions.reduce((a, b) => a | b, 0);\n\n\n    return directions;\n  }\n\n  getDirection() {\n    const {\n      direction\n    } = this.getConfig();\n    let directions = [];\n\n    if (direction & Direction.RIGHT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n\n    if (direction & Direction.LEFT) {\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\n    }\n\n    if (direction & Direction.UP) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n\n    if (direction & Direction.DOWN) {\n      directions.push(Hammer.DIRECTION_VERTICAL);\n    }\n\n    directions = [...new Set(directions)];\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\n    if (directions.length === 1) return directions[0];\n    return Hammer.DIRECTION_ALL;\n  }\n\n  isGestureEnabledForEvent({\n    minPointers,\n    maxPointers,\n    numberOfPointers,\n    maxDist,\n    maxDeltaX,\n    maxDeltaY,\n    maxDistSq,\n    shouldCancelWhenOutside\n  }, recognizer, {\n    maxPointers: pointerLength,\n    deltaX: dx,\n    deltaY: dy,\n    ...props\n  }) {\n    const validPointerCount = pointerLength === numberOfPointers;\n\n    if (!validPointerCount && this.isGestureRunning) {\n      return {\n        failed: true\n      };\n    }\n\n    return {\n      success: validPointerCount\n    };\n  }\n\n  updateGestureConfig({\n    numberOfPointers = 1,\n    direction,\n    ...props\n  }) {\n    if (isnan(direction) || typeof direction !== 'number') {\n      throw new GesturePropError('direction', direction, 'number');\n    }\n\n    return super.updateGestureConfig({\n      numberOfPointers,\n      direction,\n      ...props\n    });\n  }\n\n}\n\nexport default FlingGestureHandler;","map":{"version":3,"sources":["C:/Users/samuk_000/trabalho_comunicacao_dados-master/trabalho/node-react/node_modules/react-native-gesture-handler/web/FlingGestureHandler.js"],"names":["Hammer","Direction","GesturePropError","DraggingGestureHandler","isnan","FlingGestureHandler","name","NativeGestureClass","Swipe","onGestureActivated","event","sendEvent","eventType","INPUT_MOVE","isFinal","isFirst","isGestureRunning","hasGestureFailed","INPUT_END","onRawEvent","ev","setTimeout","cancelEvent","gesture","hammer","get","options","enable","onStart","getHammerConfig","pointers","config","numberOfPointers","direction","getDirection","getTargetDirections","directions","RIGHT","push","DIRECTION_RIGHT","LEFT","DIRECTION_LEFT","UP","DIRECTION_UP","DOWN","DIRECTION_DOWN","getConfig","DIRECTION_HORIZONTAL","DIRECTION_VERTICAL","Set","length","DIRECTION_NONE","DIRECTION_ALL","isGestureEnabledForEvent","minPointers","maxPointers","maxDist","maxDeltaX","maxDeltaY","maxDistSq","shouldCancelWhenOutside","recognizer","pointerLength","deltaX","dx","deltaY","dy","props","validPointerCount","failed","success","updateGestureConfig"],"mappings":"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","sourcesContent":["import Hammer from '@egjs/hammerjs';\r\n\r\nimport { Direction } from './constants';\r\nimport { GesturePropError } from './Errors';\r\nimport DraggingGestureHandler from './DraggingGestureHandler';\r\nimport { isnan } from './utils';\r\n\r\nclass FlingGestureHandler extends DraggingGestureHandler {\r\n  get name() {\r\n    return 'swipe';\r\n  }\r\n\r\n  get NativeGestureClass() {\r\n    return Hammer.Swipe;\r\n  }\r\n\r\n  onGestureActivated(event) {\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_MOVE,\r\n      isFinal: false,\r\n      isFirst: true,\r\n    });\r\n    this.isGestureRunning = false;\r\n    this.hasGestureFailed = false;\r\n    this.sendEvent({\r\n      ...event,\r\n      eventType: Hammer.INPUT_END,\r\n      isFinal: true,\r\n    });\r\n  }\r\n\r\n  onRawEvent(ev) {\r\n    super.onRawEvent(ev);\r\n    if (this.hasGestureFailed) {\r\n      return;\r\n    }\r\n    // Hammer doesn't send a `cancel` event for taps.\r\n    // Manually fail the event.\r\n    if (ev.isFinal) {\r\n      setTimeout(() => {\r\n        if (this.isGestureRunning) {\r\n          this.cancelEvent(ev);\r\n        }\r\n      });\r\n    } else if (!this.hasGestureFailed && !this.isGestureRunning) {\r\n      // Tap Gesture start event\r\n      const gesture = this.hammer.get(this.name);\r\n      if (gesture.options.enable(gesture, ev)) {\r\n        this.onStart(ev);\r\n        this.sendEvent(ev);\r\n      }\r\n    }\r\n  }\r\n\r\n  getHammerConfig() {\r\n    return {\r\n      pointers: this.config.numberOfPointers,\r\n      direction: this.getDirection(),\r\n    };\r\n  }\r\n\r\n  getTargetDirections(direction) {\r\n    const directions = [];\r\n    if (direction & Direction.RIGHT) {\r\n      directions.push(Hammer.DIRECTION_RIGHT);\r\n    }\r\n    if (direction & Direction.LEFT) {\r\n      directions.push(Hammer.DIRECTION_LEFT);\r\n    }\r\n    if (direction & Direction.UP) {\r\n      directions.push(Hammer.DIRECTION_UP);\r\n    }\r\n    if (direction & Direction.DOWN) {\r\n      directions.push(Hammer.DIRECTION_DOWN);\r\n    }\r\n    // const hammerDirection = directions.reduce((a, b) => a | b, 0);\r\n    return directions;\r\n  }\r\n\r\n  getDirection() {\r\n    const { direction } = this.getConfig();\r\n\r\n    let directions = [];\r\n    if (direction & Direction.RIGHT) {\r\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\r\n    }\r\n    if (direction & Direction.LEFT) {\r\n      directions.push(Hammer.DIRECTION_HORIZONTAL);\r\n    }\r\n    if (direction & Direction.UP) {\r\n      directions.push(Hammer.DIRECTION_VERTICAL);\r\n    }\r\n    if (direction & Direction.DOWN) {\r\n      directions.push(Hammer.DIRECTION_VERTICAL);\r\n    }\r\n    directions = [...new Set(directions)];\r\n\r\n    if (directions.length === 0) return Hammer.DIRECTION_NONE;\r\n    if (directions.length === 1) return directions[0];\r\n    return Hammer.DIRECTION_ALL;\r\n  }\r\n\r\n  isGestureEnabledForEvent(\r\n    {\r\n      minPointers,\r\n      maxPointers,\r\n      numberOfPointers,\r\n      maxDist,\r\n      maxDeltaX,\r\n      maxDeltaY,\r\n      maxDistSq,\r\n      shouldCancelWhenOutside,\r\n    },\r\n    recognizer,\r\n    { maxPointers: pointerLength, deltaX: dx, deltaY: dy, ...props }\r\n  ) {\r\n    const validPointerCount = pointerLength === numberOfPointers;\r\n    if (!validPointerCount && this.isGestureRunning) {\r\n      return { failed: true };\r\n    }\r\n    return { success: validPointerCount };\r\n  }\r\n\r\n  updateGestureConfig({ numberOfPointers = 1, direction, ...props }) {\r\n    if (isnan(direction) || typeof direction !== 'number') {\r\n      throw new GesturePropError('direction', direction, 'number');\r\n    }\r\n    return super.updateGestureConfig({\r\n      numberOfPointers,\r\n      direction,\r\n      ...props,\r\n    });\r\n  }\r\n}\r\n\r\nexport default FlingGestureHandler;\r\n"]},"metadata":{},"sourceType":"module"}